# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_general', [dirname(__file__)])
        except ImportError:
            import _general
            return _general
        if fp is not None:
            try:
                _mod = imp.load_module('_general', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _general = swig_import_helper()
    del swig_import_helper
else:
    import _general
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _general.SHARED_PTR_DISOWN
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _general.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _general.SwigPyIterator_value(self)
    def incr(self, n=1): return _general.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _general.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _general.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _general.SwigPyIterator_equal(self, *args)
    def copy(self): return _general.SwigPyIterator_copy(self)
    def next(self): return _general.SwigPyIterator_next(self)
    def __next__(self): return _general.SwigPyIterator___next__(self)
    def previous(self): return _general.SwigPyIterator_previous(self)
    def advance(self, *args): return _general.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _general.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _general.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _general.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _general.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _general.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _general.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _general.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MTRand(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MTRand, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MTRand, name)
    __repr__ = _swig_repr
    N = _general.MTRand_N
    SAVE = _general.MTRand_SAVE
    def __init__(self, *args): 
        this = _general.new_MTRand(*args)
        try: self.this.append(this)
        except: self.this = this
    def randInt(self, *args): return _general.MTRand_randInt(self, *args)
    def rand(self, *args): return _general.MTRand_rand(self, *args)
    def randExc(self, *args): return _general.MTRand_randExc(self, *args)
    def randDblExc(self, *args): return _general.MTRand_randDblExc(self, *args)
    def __call__(self): return _general.MTRand___call__(self)
    def rand53(self): return _general.MTRand_rand53(self)
    def randNorm(self, mean=0.0, stddev=1.0): return _general.MTRand_randNorm(self, mean, stddev)
    def seed(self, *args): return _general.MTRand_seed(self, *args)
    def save(self, *args): return _general.MTRand_save(self, *args)
    def load(self, *args): return _general.MTRand_load(self, *args)
    __swig_destroy__ = _general.delete_MTRand
    __del__ = lambda self : None;
MTRand_swigregister = _general.MTRand_swigregister
MTRand_swigregister(MTRand)

Symbol = int
SoftSymbol = float
N0_t = float
FadingMagnitude = float
LLRValue = float
ComplexSymbol = complex

class FadingSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadingSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FadingSymbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _general.FadingSymbol_symbol_set
    __swig_getmethods__["symbol"] = _general.FadingSymbol_symbol_get
    if _newclass:symbol = _swig_property(_general.FadingSymbol_symbol_get, _general.FadingSymbol_symbol_set)
    __swig_setmethods__["fading"] = _general.FadingSymbol_fading_set
    __swig_getmethods__["fading"] = _general.FadingSymbol_fading_get
    if _newclass:fading = _swig_property(_general.FadingSymbol_fading_get, _general.FadingSymbol_fading_set)
    def __init__(self): 
        this = _general.new_FadingSymbol()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _general.delete_FadingSymbol
    __del__ = lambda self : None;
FadingSymbol_swigregister = _general.FadingSymbol_swigregister
FadingSymbol_swigregister(FadingSymbol)

class FadingComplexSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadingComplexSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FadingComplexSymbol, name)
    __repr__ = _swig_repr
    __swig_setmethods__["symbol"] = _general.FadingComplexSymbol_symbol_set
    __swig_getmethods__["symbol"] = _general.FadingComplexSymbol_symbol_get
    if _newclass:symbol = _swig_property(_general.FadingComplexSymbol_symbol_get, _general.FadingComplexSymbol_symbol_set)
    __swig_setmethods__["fading"] = _general.FadingComplexSymbol_fading_set
    __swig_getmethods__["fading"] = _general.FadingComplexSymbol_fading_get
    if _newclass:fading = _swig_property(_general.FadingComplexSymbol_fading_get, _general.FadingComplexSymbol_fading_set)
    def __init__(self): 
        this = _general.new_FadingComplexSymbol()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _general.delete_FadingComplexSymbol
    __del__ = lambda self : None;
FadingComplexSymbol_swigregister = _general.FadingComplexSymbol_swigregister
FadingComplexSymbol_swigregister(FadingComplexSymbol)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectori___nonzero__(self)
    def __bool__(self): return _general.vectori___bool__(self)
    def __len__(self): return _general.vectori___len__(self)
    def pop(self): return _general.vectori_pop(self)
    def __getslice__(self, *args): return _general.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectori___setitem__(self, *args)
    def append(self, *args): return _general.vectori_append(self, *args)
    def empty(self): return _general.vectori_empty(self)
    def size(self): return _general.vectori_size(self)
    def clear(self): return _general.vectori_clear(self)
    def swap(self, *args): return _general.vectori_swap(self, *args)
    def get_allocator(self): return _general.vectori_get_allocator(self)
    def begin(self): return _general.vectori_begin(self)
    def end(self): return _general.vectori_end(self)
    def rbegin(self): return _general.vectori_rbegin(self)
    def rend(self): return _general.vectori_rend(self)
    def pop_back(self): return _general.vectori_pop_back(self)
    def erase(self, *args): return _general.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectori_push_back(self, *args)
    def front(self): return _general.vectori_front(self)
    def back(self): return _general.vectori_back(self)
    def assign(self, *args): return _general.vectori_assign(self, *args)
    def resize(self, *args): return _general.vectori_resize(self, *args)
    def insert(self, *args): return _general.vectori_insert(self, *args)
    def reserve(self, *args): return _general.vectori_reserve(self, *args)
    def capacity(self): return _general.vectori_capacity(self)
    __swig_destroy__ = _general.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _general.vectori_swigregister
vectori_swigregister(vectori)

class vectorcf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorcf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorcf, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorcf_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorcf___nonzero__(self)
    def __bool__(self): return _general.vectorcf___bool__(self)
    def __len__(self): return _general.vectorcf___len__(self)
    def pop(self): return _general.vectorcf_pop(self)
    def __getslice__(self, *args): return _general.vectorcf___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorcf___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorcf___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorcf___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorcf___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorcf___setitem__(self, *args)
    def append(self, *args): return _general.vectorcf_append(self, *args)
    def empty(self): return _general.vectorcf_empty(self)
    def size(self): return _general.vectorcf_size(self)
    def clear(self): return _general.vectorcf_clear(self)
    def swap(self, *args): return _general.vectorcf_swap(self, *args)
    def get_allocator(self): return _general.vectorcf_get_allocator(self)
    def begin(self): return _general.vectorcf_begin(self)
    def end(self): return _general.vectorcf_end(self)
    def rbegin(self): return _general.vectorcf_rbegin(self)
    def rend(self): return _general.vectorcf_rend(self)
    def pop_back(self): return _general.vectorcf_pop_back(self)
    def erase(self, *args): return _general.vectorcf_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorcf(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorcf_push_back(self, *args)
    def front(self): return _general.vectorcf_front(self)
    def back(self): return _general.vectorcf_back(self)
    def assign(self, *args): return _general.vectorcf_assign(self, *args)
    def resize(self, *args): return _general.vectorcf_resize(self, *args)
    def insert(self, *args): return _general.vectorcf_insert(self, *args)
    def reserve(self, *args): return _general.vectorcf_reserve(self, *args)
    def capacity(self): return _general.vectorcf_capacity(self)
    __swig_destroy__ = _general.delete_vectorcf
    __del__ = lambda self : None;
vectorcf_swigregister = _general.vectorcf_swigregister
vectorcf_swigregister(vectorcf)

class vectorcd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorcd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorcd, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorcd_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorcd___nonzero__(self)
    def __bool__(self): return _general.vectorcd___bool__(self)
    def __len__(self): return _general.vectorcd___len__(self)
    def pop(self): return _general.vectorcd_pop(self)
    def __getslice__(self, *args): return _general.vectorcd___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorcd___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorcd___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorcd___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorcd___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorcd___setitem__(self, *args)
    def append(self, *args): return _general.vectorcd_append(self, *args)
    def empty(self): return _general.vectorcd_empty(self)
    def size(self): return _general.vectorcd_size(self)
    def clear(self): return _general.vectorcd_clear(self)
    def swap(self, *args): return _general.vectorcd_swap(self, *args)
    def get_allocator(self): return _general.vectorcd_get_allocator(self)
    def begin(self): return _general.vectorcd_begin(self)
    def end(self): return _general.vectorcd_end(self)
    def rbegin(self): return _general.vectorcd_rbegin(self)
    def rend(self): return _general.vectorcd_rend(self)
    def pop_back(self): return _general.vectorcd_pop_back(self)
    def erase(self, *args): return _general.vectorcd_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorcd(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorcd_push_back(self, *args)
    def front(self): return _general.vectorcd_front(self)
    def back(self): return _general.vectorcd_back(self)
    def assign(self, *args): return _general.vectorcd_assign(self, *args)
    def resize(self, *args): return _general.vectorcd_resize(self, *args)
    def insert(self, *args): return _general.vectorcd_insert(self, *args)
    def reserve(self, *args): return _general.vectorcd_reserve(self, *args)
    def capacity(self): return _general.vectorcd_capacity(self)
    __swig_destroy__ = _general.delete_vectorcd
    __del__ = lambda self : None;
vectorcd_swigregister = _general.vectorcd_swigregister
vectorcd_swigregister(vectorcd)

class vectorui(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorui, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorui_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorui___nonzero__(self)
    def __bool__(self): return _general.vectorui___bool__(self)
    def __len__(self): return _general.vectorui___len__(self)
    def pop(self): return _general.vectorui_pop(self)
    def __getslice__(self, *args): return _general.vectorui___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorui___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorui___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorui___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorui___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorui___setitem__(self, *args)
    def append(self, *args): return _general.vectorui_append(self, *args)
    def empty(self): return _general.vectorui_empty(self)
    def size(self): return _general.vectorui_size(self)
    def clear(self): return _general.vectorui_clear(self)
    def swap(self, *args): return _general.vectorui_swap(self, *args)
    def get_allocator(self): return _general.vectorui_get_allocator(self)
    def begin(self): return _general.vectorui_begin(self)
    def end(self): return _general.vectorui_end(self)
    def rbegin(self): return _general.vectorui_rbegin(self)
    def rend(self): return _general.vectorui_rend(self)
    def pop_back(self): return _general.vectorui_pop_back(self)
    def erase(self, *args): return _general.vectorui_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorui(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorui_push_back(self, *args)
    def front(self): return _general.vectorui_front(self)
    def back(self): return _general.vectorui_back(self)
    def assign(self, *args): return _general.vectorui_assign(self, *args)
    def resize(self, *args): return _general.vectorui_resize(self, *args)
    def insert(self, *args): return _general.vectorui_insert(self, *args)
    def reserve(self, *args): return _general.vectorui_reserve(self, *args)
    def capacity(self): return _general.vectorui_capacity(self)
    __swig_destroy__ = _general.delete_vectorui
    __del__ = lambda self : None;
vectorui_swigregister = _general.vectorui_swigregister
vectorui_swigregister(vectorui)

class vectorus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorus, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorus_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorus___nonzero__(self)
    def __bool__(self): return _general.vectorus___bool__(self)
    def __len__(self): return _general.vectorus___len__(self)
    def pop(self): return _general.vectorus_pop(self)
    def __getslice__(self, *args): return _general.vectorus___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorus___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorus___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorus___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorus___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorus___setitem__(self, *args)
    def append(self, *args): return _general.vectorus_append(self, *args)
    def empty(self): return _general.vectorus_empty(self)
    def size(self): return _general.vectorus_size(self)
    def clear(self): return _general.vectorus_clear(self)
    def swap(self, *args): return _general.vectorus_swap(self, *args)
    def get_allocator(self): return _general.vectorus_get_allocator(self)
    def begin(self): return _general.vectorus_begin(self)
    def end(self): return _general.vectorus_end(self)
    def rbegin(self): return _general.vectorus_rbegin(self)
    def rend(self): return _general.vectorus_rend(self)
    def pop_back(self): return _general.vectorus_pop_back(self)
    def erase(self, *args): return _general.vectorus_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorus(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorus_push_back(self, *args)
    def front(self): return _general.vectorus_front(self)
    def back(self): return _general.vectorus_back(self)
    def assign(self, *args): return _general.vectorus_assign(self, *args)
    def resize(self, *args): return _general.vectorus_resize(self, *args)
    def insert(self, *args): return _general.vectorus_insert(self, *args)
    def reserve(self, *args): return _general.vectorus_reserve(self, *args)
    def capacity(self): return _general.vectorus_capacity(self)
    __swig_destroy__ = _general.delete_vectorus
    __del__ = lambda self : None;
vectorus_swigregister = _general.vectorus_swigregister
vectorus_swigregister(vectorus)

class vectors(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectors___nonzero__(self)
    def __bool__(self): return _general.vectors___bool__(self)
    def __len__(self): return _general.vectors___len__(self)
    def pop(self): return _general.vectors_pop(self)
    def __getslice__(self, *args): return _general.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectors___setitem__(self, *args)
    def append(self, *args): return _general.vectors_append(self, *args)
    def empty(self): return _general.vectors_empty(self)
    def size(self): return _general.vectors_size(self)
    def clear(self): return _general.vectors_clear(self)
    def swap(self, *args): return _general.vectors_swap(self, *args)
    def get_allocator(self): return _general.vectors_get_allocator(self)
    def begin(self): return _general.vectors_begin(self)
    def end(self): return _general.vectors_end(self)
    def rbegin(self): return _general.vectors_rbegin(self)
    def rend(self): return _general.vectors_rend(self)
    def pop_back(self): return _general.vectors_pop_back(self)
    def erase(self, *args): return _general.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectors_push_back(self, *args)
    def front(self): return _general.vectors_front(self)
    def back(self): return _general.vectors_back(self)
    def assign(self, *args): return _general.vectors_assign(self, *args)
    def resize(self, *args): return _general.vectors_resize(self, *args)
    def insert(self, *args): return _general.vectors_insert(self, *args)
    def reserve(self, *args): return _general.vectors_reserve(self, *args)
    def capacity(self): return _general.vectors_capacity(self)
    __swig_destroy__ = _general.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _general.vectors_swigregister
vectors_swigregister(vectors)

class vectorul(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorul, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorul, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorul_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorul___nonzero__(self)
    def __bool__(self): return _general.vectorul___bool__(self)
    def __len__(self): return _general.vectorul___len__(self)
    def pop(self): return _general.vectorul_pop(self)
    def __getslice__(self, *args): return _general.vectorul___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorul___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorul___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorul___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorul___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorul___setitem__(self, *args)
    def append(self, *args): return _general.vectorul_append(self, *args)
    def empty(self): return _general.vectorul_empty(self)
    def size(self): return _general.vectorul_size(self)
    def clear(self): return _general.vectorul_clear(self)
    def swap(self, *args): return _general.vectorul_swap(self, *args)
    def get_allocator(self): return _general.vectorul_get_allocator(self)
    def begin(self): return _general.vectorul_begin(self)
    def end(self): return _general.vectorul_end(self)
    def rbegin(self): return _general.vectorul_rbegin(self)
    def rend(self): return _general.vectorul_rend(self)
    def pop_back(self): return _general.vectorul_pop_back(self)
    def erase(self, *args): return _general.vectorul_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorul(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorul_push_back(self, *args)
    def front(self): return _general.vectorul_front(self)
    def back(self): return _general.vectorul_back(self)
    def assign(self, *args): return _general.vectorul_assign(self, *args)
    def resize(self, *args): return _general.vectorul_resize(self, *args)
    def insert(self, *args): return _general.vectorul_insert(self, *args)
    def reserve(self, *args): return _general.vectorul_reserve(self, *args)
    def capacity(self): return _general.vectorul_capacity(self)
    __swig_destroy__ = _general.delete_vectorul
    __del__ = lambda self : None;
vectorul_swigregister = _general.vectorul_swigregister
vectorul_swigregister(vectorul)

class vectorull(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorull, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorull, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorull_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorull___nonzero__(self)
    def __bool__(self): return _general.vectorull___bool__(self)
    def __len__(self): return _general.vectorull___len__(self)
    def pop(self): return _general.vectorull_pop(self)
    def __getslice__(self, *args): return _general.vectorull___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorull___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorull___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorull___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorull___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorull___setitem__(self, *args)
    def append(self, *args): return _general.vectorull_append(self, *args)
    def empty(self): return _general.vectorull_empty(self)
    def size(self): return _general.vectorull_size(self)
    def clear(self): return _general.vectorull_clear(self)
    def swap(self, *args): return _general.vectorull_swap(self, *args)
    def get_allocator(self): return _general.vectorull_get_allocator(self)
    def begin(self): return _general.vectorull_begin(self)
    def end(self): return _general.vectorull_end(self)
    def rbegin(self): return _general.vectorull_rbegin(self)
    def rend(self): return _general.vectorull_rend(self)
    def pop_back(self): return _general.vectorull_pop_back(self)
    def erase(self, *args): return _general.vectorull_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorull(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorull_push_back(self, *args)
    def front(self): return _general.vectorull_front(self)
    def back(self): return _general.vectorull_back(self)
    def assign(self, *args): return _general.vectorull_assign(self, *args)
    def resize(self, *args): return _general.vectorull_resize(self, *args)
    def insert(self, *args): return _general.vectorull_insert(self, *args)
    def reserve(self, *args): return _general.vectorull_reserve(self, *args)
    def capacity(self): return _general.vectorull_capacity(self)
    __swig_destroy__ = _general.delete_vectorull
    __del__ = lambda self : None;
vectorull_swigregister = _general.vectorull_swigregister
vectorull_swigregister(vectorull)

class vectorb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorb, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorb_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorb___nonzero__(self)
    def __bool__(self): return _general.vectorb___bool__(self)
    def __len__(self): return _general.vectorb___len__(self)
    def pop(self): return _general.vectorb_pop(self)
    def __getslice__(self, *args): return _general.vectorb___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorb___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorb___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorb___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorb___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorb___setitem__(self, *args)
    def append(self, *args): return _general.vectorb_append(self, *args)
    def empty(self): return _general.vectorb_empty(self)
    def size(self): return _general.vectorb_size(self)
    def clear(self): return _general.vectorb_clear(self)
    def swap(self, *args): return _general.vectorb_swap(self, *args)
    def get_allocator(self): return _general.vectorb_get_allocator(self)
    def begin(self): return _general.vectorb_begin(self)
    def end(self): return _general.vectorb_end(self)
    def rbegin(self): return _general.vectorb_rbegin(self)
    def rend(self): return _general.vectorb_rend(self)
    def pop_back(self): return _general.vectorb_pop_back(self)
    def erase(self, *args): return _general.vectorb_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorb(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorb_push_back(self, *args)
    def front(self): return _general.vectorb_front(self)
    def back(self): return _general.vectorb_back(self)
    def assign(self, *args): return _general.vectorb_assign(self, *args)
    def resize(self, *args): return _general.vectorb_resize(self, *args)
    def insert(self, *args): return _general.vectorb_insert(self, *args)
    def reserve(self, *args): return _general.vectorb_reserve(self, *args)
    def capacity(self): return _general.vectorb_capacity(self)
    __swig_destroy__ = _general.delete_vectorb
    __del__ = lambda self : None;
vectorb_swigregister = _general.vectorb_swigregister
vectorb_swigregister(vectorb)

class vectorf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorf, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorf_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorf___nonzero__(self)
    def __bool__(self): return _general.vectorf___bool__(self)
    def __len__(self): return _general.vectorf___len__(self)
    def pop(self): return _general.vectorf_pop(self)
    def __getslice__(self, *args): return _general.vectorf___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorf___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorf___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorf___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorf___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorf___setitem__(self, *args)
    def append(self, *args): return _general.vectorf_append(self, *args)
    def empty(self): return _general.vectorf_empty(self)
    def size(self): return _general.vectorf_size(self)
    def clear(self): return _general.vectorf_clear(self)
    def swap(self, *args): return _general.vectorf_swap(self, *args)
    def get_allocator(self): return _general.vectorf_get_allocator(self)
    def begin(self): return _general.vectorf_begin(self)
    def end(self): return _general.vectorf_end(self)
    def rbegin(self): return _general.vectorf_rbegin(self)
    def rend(self): return _general.vectorf_rend(self)
    def pop_back(self): return _general.vectorf_pop_back(self)
    def erase(self, *args): return _general.vectorf_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorf_push_back(self, *args)
    def front(self): return _general.vectorf_front(self)
    def back(self): return _general.vectorf_back(self)
    def assign(self, *args): return _general.vectorf_assign(self, *args)
    def resize(self, *args): return _general.vectorf_resize(self, *args)
    def insert(self, *args): return _general.vectorf_insert(self, *args)
    def reserve(self, *args): return _general.vectorf_reserve(self, *args)
    def capacity(self): return _general.vectorf_capacity(self)
    __swig_destroy__ = _general.delete_vectorf
    __del__ = lambda self : None;
vectorf_swigregister = _general.vectorf_swigregister
vectorf_swigregister(vectorf)

class vectorstr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorstr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorstr, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vectorstr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vectorstr___nonzero__(self)
    def __bool__(self): return _general.vectorstr___bool__(self)
    def __len__(self): return _general.vectorstr___len__(self)
    def pop(self): return _general.vectorstr_pop(self)
    def __getslice__(self, *args): return _general.vectorstr___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vectorstr___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vectorstr___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vectorstr___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vectorstr___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vectorstr___setitem__(self, *args)
    def append(self, *args): return _general.vectorstr_append(self, *args)
    def empty(self): return _general.vectorstr_empty(self)
    def size(self): return _general.vectorstr_size(self)
    def clear(self): return _general.vectorstr_clear(self)
    def swap(self, *args): return _general.vectorstr_swap(self, *args)
    def get_allocator(self): return _general.vectorstr_get_allocator(self)
    def begin(self): return _general.vectorstr_begin(self)
    def end(self): return _general.vectorstr_end(self)
    def rbegin(self): return _general.vectorstr_rbegin(self)
    def rend(self): return _general.vectorstr_rend(self)
    def pop_back(self): return _general.vectorstr_pop_back(self)
    def erase(self, *args): return _general.vectorstr_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vectorstr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vectorstr_push_back(self, *args)
    def front(self): return _general.vectorstr_front(self)
    def back(self): return _general.vectorstr_back(self)
    def assign(self, *args): return _general.vectorstr_assign(self, *args)
    def resize(self, *args): return _general.vectorstr_resize(self, *args)
    def insert(self, *args): return _general.vectorstr_insert(self, *args)
    def reserve(self, *args): return _general.vectorstr_reserve(self, *args)
    def capacity(self): return _general.vectorstr_capacity(self)
    __swig_destroy__ = _general.delete_vectorstr
    __del__ = lambda self : None;
vectorstr_swigregister = _general.vectorstr_swigregister
vectorstr_swigregister(vectorstr)

class vector_fadingsymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_fadingsymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_fadingsymbol, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vector_fadingsymbol_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vector_fadingsymbol___nonzero__(self)
    def __bool__(self): return _general.vector_fadingsymbol___bool__(self)
    def __len__(self): return _general.vector_fadingsymbol___len__(self)
    def pop(self): return _general.vector_fadingsymbol_pop(self)
    def __getslice__(self, *args): return _general.vector_fadingsymbol___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vector_fadingsymbol___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vector_fadingsymbol___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vector_fadingsymbol___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vector_fadingsymbol___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vector_fadingsymbol___setitem__(self, *args)
    def append(self, *args): return _general.vector_fadingsymbol_append(self, *args)
    def empty(self): return _general.vector_fadingsymbol_empty(self)
    def size(self): return _general.vector_fadingsymbol_size(self)
    def clear(self): return _general.vector_fadingsymbol_clear(self)
    def swap(self, *args): return _general.vector_fadingsymbol_swap(self, *args)
    def get_allocator(self): return _general.vector_fadingsymbol_get_allocator(self)
    def begin(self): return _general.vector_fadingsymbol_begin(self)
    def end(self): return _general.vector_fadingsymbol_end(self)
    def rbegin(self): return _general.vector_fadingsymbol_rbegin(self)
    def rend(self): return _general.vector_fadingsymbol_rend(self)
    def pop_back(self): return _general.vector_fadingsymbol_pop_back(self)
    def erase(self, *args): return _general.vector_fadingsymbol_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vector_fadingsymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vector_fadingsymbol_push_back(self, *args)
    def front(self): return _general.vector_fadingsymbol_front(self)
    def back(self): return _general.vector_fadingsymbol_back(self)
    def assign(self, *args): return _general.vector_fadingsymbol_assign(self, *args)
    def resize(self, *args): return _general.vector_fadingsymbol_resize(self, *args)
    def insert(self, *args): return _general.vector_fadingsymbol_insert(self, *args)
    def reserve(self, *args): return _general.vector_fadingsymbol_reserve(self, *args)
    def capacity(self): return _general.vector_fadingsymbol_capacity(self)
    __swig_destroy__ = _general.delete_vector_fadingsymbol
    __del__ = lambda self : None;
vector_fadingsymbol_swigregister = _general.vector_fadingsymbol_swigregister
vector_fadingsymbol_swigregister(vector_fadingsymbol)

class vector_fading_csymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_fading_csymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_fading_csymbol, name)
    __repr__ = _swig_repr
    def iterator(self): return _general.vector_fading_csymbol_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _general.vector_fading_csymbol___nonzero__(self)
    def __bool__(self): return _general.vector_fading_csymbol___bool__(self)
    def __len__(self): return _general.vector_fading_csymbol___len__(self)
    def pop(self): return _general.vector_fading_csymbol_pop(self)
    def __getslice__(self, *args): return _general.vector_fading_csymbol___getslice__(self, *args)
    def __setslice__(self, *args): return _general.vector_fading_csymbol___setslice__(self, *args)
    def __delslice__(self, *args): return _general.vector_fading_csymbol___delslice__(self, *args)
    def __delitem__(self, *args): return _general.vector_fading_csymbol___delitem__(self, *args)
    def __getitem__(self, *args): return _general.vector_fading_csymbol___getitem__(self, *args)
    def __setitem__(self, *args): return _general.vector_fading_csymbol___setitem__(self, *args)
    def append(self, *args): return _general.vector_fading_csymbol_append(self, *args)
    def empty(self): return _general.vector_fading_csymbol_empty(self)
    def size(self): return _general.vector_fading_csymbol_size(self)
    def clear(self): return _general.vector_fading_csymbol_clear(self)
    def swap(self, *args): return _general.vector_fading_csymbol_swap(self, *args)
    def get_allocator(self): return _general.vector_fading_csymbol_get_allocator(self)
    def begin(self): return _general.vector_fading_csymbol_begin(self)
    def end(self): return _general.vector_fading_csymbol_end(self)
    def rbegin(self): return _general.vector_fading_csymbol_rbegin(self)
    def rend(self): return _general.vector_fading_csymbol_rend(self)
    def pop_back(self): return _general.vector_fading_csymbol_pop_back(self)
    def erase(self, *args): return _general.vector_fading_csymbol_erase(self, *args)
    def __init__(self, *args): 
        this = _general.new_vector_fading_csymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _general.vector_fading_csymbol_push_back(self, *args)
    def front(self): return _general.vector_fading_csymbol_front(self)
    def back(self): return _general.vector_fading_csymbol_back(self)
    def assign(self, *args): return _general.vector_fading_csymbol_assign(self, *args)
    def resize(self, *args): return _general.vector_fading_csymbol_resize(self, *args)
    def insert(self, *args): return _general.vector_fading_csymbol_insert(self, *args)
    def reserve(self, *args): return _general.vector_fading_csymbol_reserve(self, *args)
    def capacity(self): return _general.vector_fading_csymbol_capacity(self)
    __swig_destroy__ = _general.delete_vector_fading_csymbol
    __del__ = lambda self : None;
vector_fading_csymbol_swigregister = _general.vector_fading_csymbol_swigregister
vector_fading_csymbol_swigregister(vector_fading_csymbol)

vector_csymbol = vectorcd
vector_symbol = vectori
vector_softsymbol = vectorf
vector_llr = vectorf

# This file is compatible with both classic and new-style classes.


