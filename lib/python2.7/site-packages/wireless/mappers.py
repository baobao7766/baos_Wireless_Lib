# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mappers', [dirname(__file__)])
        except ImportError:
            import _mappers
            return _mappers
        if fp is not None:
            try:
                _mod = imp.load_module('_mappers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mappers = swig_import_helper()
    del swig_import_helper
else:
    import _mappers
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _mappers.SHARED_PTR_DISOWN
import wireless.general
class IComplexMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IComplexMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IComplexMapper, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mappers.delete_IComplexMapper
    __del__ = lambda self : None;
    def process(self, *args): return _mappers.IComplexMapper_process(self, *args)
    def getAveragePower(self): return _mappers.IComplexMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.IComplexMapper_forecast(self, *args)
IComplexMapper_swigregister = _mappers.IComplexMapper_swigregister
IComplexMapper_swigregister(IComplexMapper)

class LinearMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinearMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinearMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_LinearMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _mappers.LinearMapper_process(self, *args)
    def map(self, *args): return _mappers.LinearMapper_map(self, *args)
    def getAveragePower(self): return _mappers.LinearMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.LinearMapper_forecast(self, *args)
    __swig_destroy__ = _mappers.delete_LinearMapper
    __del__ = lambda self : None;
LinearMapper_swigregister = _mappers.LinearMapper_swigregister
LinearMapper_swigregister(LinearMapper)

class GrayMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrayMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GrayMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_GrayMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _mappers.GrayMapper_process(self, *args)
    def map(self, *args): return _mappers.GrayMapper_map(self, *args)
    def getAveragePower(self): return _mappers.GrayMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.GrayMapper_forecast(self, *args)
    __swig_destroy__ = _mappers.delete_GrayMapper
    __del__ = lambda self : None;
GrayMapper_swigregister = _mappers.GrayMapper_swigregister
GrayMapper_swigregister(GrayMapper)

class GaussianMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_GaussianMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mappers.delete_GaussianMapper
    __del__ = lambda self : None;
    def process(self, *args): return _mappers.GaussianMapper_process(self, *args)
    def map(self, *args): return _mappers.GaussianMapper_map(self, *args)
    def getAveragePower(self): return _mappers.GaussianMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.GaussianMapper_forecast(self, *args)
GaussianMapper_swigregister = _mappers.GaussianMapper_swigregister
GaussianMapper_swigregister(GaussianMapper)

class TruncatedNormalDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TruncatedNormalDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TruncatedNormalDistribution, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_TruncatedNormalDistribution(*args)
        try: self.this.append(this)
        except: self.this = this
    def ppf(self, *args): return _mappers.TruncatedNormalDistribution_ppf(self, *args)
    def variance(self): return _mappers.TruncatedNormalDistribution_variance(self)
    __swig_destroy__ = _mappers.delete_TruncatedNormalDistribution
    __del__ = lambda self : None;
TruncatedNormalDistribution_swigregister = _mappers.TruncatedNormalDistribution_swigregister
TruncatedNormalDistribution_swigregister(TruncatedNormalDistribution)

class NormalDistribution(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalDistribution, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NormalDistribution, name)
    __repr__ = _swig_repr
    __swig_getmethods__["pdf"] = lambda x: _mappers.NormalDistribution_pdf
    if _newclass:pdf = staticmethod(_mappers.NormalDistribution_pdf)
    __swig_getmethods__["cdf"] = lambda x: _mappers.NormalDistribution_cdf
    if _newclass:cdf = staticmethod(_mappers.NormalDistribution_cdf)
    __swig_getmethods__["ppf"] = lambda x: _mappers.NormalDistribution_ppf
    if _newclass:ppf = staticmethod(_mappers.NormalDistribution_ppf)
    def __init__(self): 
        this = _mappers.new_NormalDistribution()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mappers.delete_NormalDistribution
    __del__ = lambda self : None;
NormalDistribution_swigregister = _mappers.NormalDistribution_swigregister
NormalDistribution_swigregister(NormalDistribution)

def NormalDistribution_pdf(*args):
  return _mappers.NormalDistribution_pdf(*args)
NormalDistribution_pdf = _mappers.NormalDistribution_pdf

def NormalDistribution_cdf(*args):
  return _mappers.NormalDistribution_cdf(*args)
NormalDistribution_cdf = _mappers.NormalDistribution_cdf

def NormalDistribution_ppf(*args):
  return _mappers.NormalDistribution_ppf(*args)
NormalDistribution_ppf = _mappers.NormalDistribution_ppf

class QPSKMapper(IComplexMapper):
    __swig_setmethods__ = {}
    for _s in [IComplexMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QPSKMapper, name, value)
    __swig_getmethods__ = {}
    for _s in [IComplexMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QPSKMapper, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _mappers.delete_QPSKMapper
    __del__ = lambda self : None;
    def process(self, *args): return _mappers.QPSKMapper_process(self, *args)
    def getAveragePower(self): return _mappers.QPSKMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.QPSKMapper_forecast(self, *args)
    def __init__(self): 
        this = _mappers.new_QPSKMapper()
        try: self.this.append(this)
        except: self.this = this
QPSKMapper_swigregister = _mappers.QPSKMapper_swigregister
QPSKMapper_swigregister(QPSKMapper)

class SoftMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_SoftMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _mappers.SoftMapper_process(self, *args)
    def map(self, *args): return _mappers.SoftMapper_map(self, *args)
    def getAveragePower(self): return _mappers.SoftMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.SoftMapper_forecast(self, *args)
    __swig_destroy__ = _mappers.delete_SoftMapper
    __del__ = lambda self : None;
SoftMapper_swigregister = _mappers.SoftMapper_swigregister
SoftMapper_swigregister(SoftMapper)

class ComplexLinearMapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexLinearMapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexLinearMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_ComplexLinearMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _mappers.ComplexLinearMapper_process(self, *args)
    def map(self, *args): return _mappers.ComplexLinearMapper_map(self, *args)
    def getAveragePower(self): return _mappers.ComplexLinearMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.ComplexLinearMapper_forecast(self, *args)
    __swig_destroy__ = _mappers.delete_ComplexLinearMapper
    __del__ = lambda self : None;
ComplexLinearMapper_swigregister = _mappers.ComplexLinearMapper_swigregister
ComplexLinearMapper_swigregister(ComplexLinearMapper)

class QamMapper(IComplexMapper):
    __swig_setmethods__ = {}
    for _s in [IComplexMapper]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QamMapper, name, value)
    __swig_getmethods__ = {}
    for _s in [IComplexMapper]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QamMapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mappers.new_QamMapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mappers.delete_QamMapper
    __del__ = lambda self : None;
    def process(self, *args): return _mappers.QamMapper_process(self, *args)
    def getAveragePower(self): return _mappers.QamMapper_getAveragePower(self)
    def forecast(self, *args): return _mappers.QamMapper_forecast(self, *args)
QamMapper_swigregister = _mappers.QamMapper_swigregister
QamMapper_swigregister(QamMapper)

# This file is compatible with both classic and new-style classes.


