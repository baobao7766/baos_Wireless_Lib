# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_demappers', [dirname(__file__)])
        except ImportError:
            import _demappers
            return _demappers
        if fp is not None:
            try:
                _mod = imp.load_module('_demappers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _demappers = swig_import_helper()
    del swig_import_helper
else:
    import _demappers
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _demappers.SHARED_PTR_DISOWN
import wireless.general
import wireless.mappers
import wireless.itpp.modulator
import wireless.itpp.base_vec
class BscDemapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BscDemapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BscDemapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _demappers.new_BscDemapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _demappers.BscDemapper_process(self, *args)
    def forecast(self, *args): return _demappers.BscDemapper_forecast(self, *args)
    __swig_destroy__ = _demappers.delete_BscDemapper
    __del__ = lambda self : None;
BscDemapper_swigregister = _demappers.BscDemapper_swigregister
BscDemapper_swigregister(BscDemapper)

class NullDemapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullDemapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NullDemapper, name)
    __repr__ = _swig_repr
    def process(self, *args): return _demappers.NullDemapper_process(self, *args)
    def map(self, *args): return _demappers.NullDemapper_map(self, *args)
    def createOutputVector(self): return _demappers.NullDemapper_createOutputVector(self)
    def __init__(self): 
        this = _demappers.new_NullDemapper()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _demappers.delete_NullDemapper
    __del__ = lambda self : None;
NullDemapper_swigregister = _demappers.NullDemapper_swigregister
NullDemapper_swigregister(NullDemapper)

class template_IDemapper_Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDemapper_Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDemapper_Symbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _demappers.delete_template_IDemapper_Symbol
    __del__ = lambda self : None;
    def process(self, *args): return _demappers.template_IDemapper_Symbol_process(self, *args)
    def forecast(self, *args): return _demappers.template_IDemapper_Symbol_forecast(self, *args)
template_IDemapper_Symbol_swigregister = _demappers.template_IDemapper_Symbol_swigregister
template_IDemapper_Symbol_swigregister(template_IDemapper_Symbol)

class template_IDemapper_ComplexSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDemapper_ComplexSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDemapper_ComplexSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _demappers.delete_template_IDemapper_ComplexSymbol
    __del__ = lambda self : None;
    def process(self, *args): return _demappers.template_IDemapper_ComplexSymbol_process(self, *args)
    def forecast(self, *args): return _demappers.template_IDemapper_ComplexSymbol_forecast(self, *args)
template_IDemapper_ComplexSymbol_swigregister = _demappers.template_IDemapper_ComplexSymbol_swigregister
template_IDemapper_ComplexSymbol_swigregister(template_IDemapper_ComplexSymbol)

class GrayDemapper(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GrayDemapper, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GrayDemapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _demappers.new_GrayDemapper(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _demappers.GrayDemapper_process(self, *args)
    def demap(self, *args): return _demappers.GrayDemapper_demap(self, *args)
    def forecast(self, *args): return _demappers.GrayDemapper_forecast(self, *args)
    __swig_destroy__ = _demappers.delete_GrayDemapper
    __del__ = lambda self : None;
GrayDemapper_swigregister = _demappers.GrayDemapper_swigregister
GrayDemapper_swigregister(GrayDemapper)

class ItppComplexDemapper(template_IDemapper_ComplexSymbol):
    __swig_setmethods__ = {}
    for _s in [template_IDemapper_ComplexSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItppComplexDemapper, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDemapper_ComplexSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ItppComplexDemapper, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _demappers.new_ItppComplexDemapper(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _demappers.delete_ItppComplexDemapper
    __del__ = lambda self : None;
    def process(self, *args): return _demappers.ItppComplexDemapper_process(self, *args)
    def forecast(self, *args): return _demappers.ItppComplexDemapper_forecast(self, *args)
ItppComplexDemapper_swigregister = _demappers.ItppComplexDemapper_swigregister
ItppComplexDemapper_swigregister(ItppComplexDemapper)

# This file is compatible with both classic and new-style classes.


