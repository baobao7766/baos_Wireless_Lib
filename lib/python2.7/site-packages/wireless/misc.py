# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_misc', [dirname(__file__)])
        except ImportError:
            import _misc
            return _misc
        if fp is not None:
            try:
                _mod = imp.load_module('_misc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _misc = swig_import_helper()
    del swig_import_helper
else:
    import _misc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _misc.SHARED_PTR_DISOWN
import wireless.general
import wireless.codes
import wireless.demappers
import wireless.mappers
import wireless.itpp.modulator
import wireless.itpp.base_vec
class PacketGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _misc.new_PacketGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _misc.PacketGenerator_seed(self, *args)
    def get(self): return _misc.PacketGenerator_get(self)
    __swig_destroy__ = _misc.delete_PacketGenerator
    __del__ = lambda self : None;
PacketGenerator_swigregister = _misc.PacketGenerator_swigregister
PacketGenerator_swigregister(PacketGenerator)

class CrcPacketGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CrcPacketGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CrcPacketGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _misc.new_CrcPacketGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _misc.CrcPacketGenerator_seed(self, *args)
    def get(self): return _misc.CrcPacketGenerator_get(self)
    __swig_destroy__ = _misc.delete_CrcPacketGenerator
    __del__ = lambda self : None;
CrcPacketGenerator_swigregister = _misc.CrcPacketGenerator_swigregister
CrcPacketGenerator_swigregister(CrcPacketGenerator)

class DefaultOracleDetector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultOracleDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultOracleDetector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _misc.new_DefaultOracleDetector(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPacket(self, *args): return _misc.DefaultOracleDetector_setPacket(self, *args)
    def isFinished(self, *args): return _misc.DefaultOracleDetector_isFinished(self, *args)
    __swig_destroy__ = _misc.delete_DefaultOracleDetector
    __del__ = lambda self : None;
DefaultOracleDetector_swigregister = _misc.DefaultOracleDetector_swigregister
DefaultOracleDetector_swigregister(DefaultOracleDetector)

class DefaultCrcDetector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultCrcDetector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultCrcDetector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _misc.new_DefaultCrcDetector(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPacket(self, *args): return _misc.DefaultCrcDetector_setPacket(self, *args)
    def isFinished(self, *args): return _misc.DefaultCrcDetector_isFinished(self, *args)
    __swig_destroy__ = _misc.delete_DefaultCrcDetector
    __del__ = lambda self : None;
DefaultCrcDetector_swigregister = _misc.DefaultCrcDetector_swigregister
DefaultCrcDetector_swigregister(DefaultCrcDetector)

class Utils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Utils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Utils, name)
    __repr__ = _swig_repr
    __swig_getmethods__["stringToVector"] = lambda x: _misc.Utils_stringToVector
    if _newclass:stringToVector = staticmethod(_misc.Utils_stringToVector)
    __swig_getmethods__["vectorToString"] = lambda x: _misc.Utils_vectorToString
    if _newclass:vectorToString = staticmethod(_misc.Utils_vectorToString)
    __swig_getmethods__["stringToHex"] = lambda x: _misc.Utils_stringToHex
    if _newclass:stringToHex = staticmethod(_misc.Utils_stringToHex)
    __swig_getmethods__["softToHardEstimates"] = lambda x: _misc.Utils_softToHardEstimates
    if _newclass:softToHardEstimates = staticmethod(_misc.Utils_softToHardEstimates)
    __swig_getmethods__["getStringBits"] = lambda x: _misc.Utils_getStringBits
    if _newclass:getStringBits = staticmethod(_misc.Utils_getStringBits)
    __swig_getmethods__["returnStringBits"] = lambda x: _misc.Utils_returnStringBits
    if _newclass:returnStringBits = staticmethod(_misc.Utils_returnStringBits)
    __swig_getmethods__["getHammingDistance"] = lambda x: _misc.Utils_getHammingDistance
    if _newclass:getHammingDistance = staticmethod(_misc.Utils_getHammingDistance)
    __swig_getmethods__["getCRC16"] = lambda x: _misc.Utils_getCRC16
    if _newclass:getCRC16 = staticmethod(_misc.Utils_getCRC16)
    __swig_getmethods__["getArrCRC16"] = lambda x: _misc.Utils_getArrCRC16
    if _newclass:getArrCRC16 = staticmethod(_misc.Utils_getArrCRC16)
    __swig_getmethods__["passesCRC16"] = lambda x: _misc.Utils_passesCRC16
    if _newclass:passesCRC16 = staticmethod(_misc.Utils_passesCRC16)
    __swig_getmethods__["getCRC32"] = lambda x: _misc.Utils_getCRC32
    if _newclass:getCRC32 = staticmethod(_misc.Utils_getCRC32)
    __swig_getmethods__["getArrCRC32"] = lambda x: _misc.Utils_getArrCRC32
    if _newclass:getArrCRC32 = staticmethod(_misc.Utils_getArrCRC32)
    __swig_getmethods__["passesCRC32"] = lambda x: _misc.Utils_passesCRC32
    if _newclass:passesCRC32 = staticmethod(_misc.Utils_passesCRC32)
    __swig_getmethods__["popcount_2"] = lambda x: _misc.Utils_popcount_2
    if _newclass:popcount_2 = staticmethod(_misc.Utils_popcount_2)
    __swig_getmethods__["copyBits"] = lambda x: _misc.Utils_copyBits
    if _newclass:copyBits = staticmethod(_misc.Utils_copyBits)
    __swig_getmethods__["returnCopiedBits"] = lambda x: _misc.Utils_returnCopiedBits
    if _newclass:returnCopiedBits = staticmethod(_misc.Utils_returnCopiedBits)
    __swig_getmethods__["XorStrings"] = lambda x: _misc.Utils_XorStrings
    if _newclass:XorStrings = staticmethod(_misc.Utils_XorStrings)
    __swig_getmethods__["find_first_difference"] = lambda x: _misc.Utils_find_first_difference
    if _newclass:find_first_difference = staticmethod(_misc.Utils_find_first_difference)
    __swig_getmethods__["BlockifyUint32"] = lambda x: _misc.Utils_BlockifyUint32
    if _newclass:BlockifyUint32 = staticmethod(_misc.Utils_BlockifyUint32)
    def __init__(self): 
        this = _misc.new_Utils()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _misc.delete_Utils
    __del__ = lambda self : None;
Utils_swigregister = _misc.Utils_swigregister
Utils_swigregister(Utils)

def Utils_stringToVector(*args):
  return _misc.Utils_stringToVector(*args)
Utils_stringToVector = _misc.Utils_stringToVector

def Utils_vectorToString(*args):
  return _misc.Utils_vectorToString(*args)
Utils_vectorToString = _misc.Utils_vectorToString

def Utils_stringToHex(*args):
  return _misc.Utils_stringToHex(*args)
Utils_stringToHex = _misc.Utils_stringToHex

def Utils_softToHardEstimates(*args):
  return _misc.Utils_softToHardEstimates(*args)
Utils_softToHardEstimates = _misc.Utils_softToHardEstimates

def Utils_getStringBits(*args):
  return _misc.Utils_getStringBits(*args)
Utils_getStringBits = _misc.Utils_getStringBits

def Utils_returnStringBits(*args):
  return _misc.Utils_returnStringBits(*args)
Utils_returnStringBits = _misc.Utils_returnStringBits

def Utils_getHammingDistance(*args):
  return _misc.Utils_getHammingDistance(*args)
Utils_getHammingDistance = _misc.Utils_getHammingDistance

def Utils_getCRC16(*args):
  return _misc.Utils_getCRC16(*args)
Utils_getCRC16 = _misc.Utils_getCRC16

def Utils_getArrCRC16(*args):
  return _misc.Utils_getArrCRC16(*args)
Utils_getArrCRC16 = _misc.Utils_getArrCRC16

def Utils_passesCRC16(*args):
  return _misc.Utils_passesCRC16(*args)
Utils_passesCRC16 = _misc.Utils_passesCRC16

def Utils_getCRC32(*args):
  return _misc.Utils_getCRC32(*args)
Utils_getCRC32 = _misc.Utils_getCRC32

def Utils_getArrCRC32(*args):
  return _misc.Utils_getArrCRC32(*args)
Utils_getArrCRC32 = _misc.Utils_getArrCRC32

def Utils_passesCRC32(*args):
  return _misc.Utils_passesCRC32(*args)
Utils_passesCRC32 = _misc.Utils_passesCRC32

def Utils_popcount_2(*args):
  return _misc.Utils_popcount_2(*args)
Utils_popcount_2 = _misc.Utils_popcount_2

def Utils_copyBits(*args):
  return _misc.Utils_copyBits(*args)
Utils_copyBits = _misc.Utils_copyBits

def Utils_returnCopiedBits(*args):
  return _misc.Utils_returnCopiedBits(*args)
Utils_returnCopiedBits = _misc.Utils_returnCopiedBits

def Utils_XorStrings(*args):
  return _misc.Utils_XorStrings(*args)
Utils_XorStrings = _misc.Utils_XorStrings

def Utils_find_first_difference(*args):
  return _misc.Utils_find_first_difference(*args)
Utils_find_first_difference = _misc.Utils_find_first_difference

def Utils_BlockifyUint32(*args):
  return _misc.Utils_BlockifyUint32(*args)
Utils_BlockifyUint32 = _misc.Utils_BlockifyUint32

class BitStatCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitStatCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitStatCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _misc.new_BitStatCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _misc.BitStatCounter_process(self, *args)
    def query(self, *args): return _misc.BitStatCounter_query(self, *args)
    __swig_destroy__ = _misc.delete_BitStatCounter
    __del__ = lambda self : None;
BitStatCounter_swigregister = _misc.BitStatCounter_swigregister
BitStatCounter_swigregister(BitStatCounter)

class BlockStatCounter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockStatCounter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockStatCounter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _misc.new_BlockStatCounter(*args)
        try: self.this.append(this)
        except: self.this = this
    def process(self, *args): return _misc.BlockStatCounter_process(self, *args)
    def query(self, *args): return _misc.BlockStatCounter_query(self, *args)
    __swig_destroy__ = _misc.delete_BlockStatCounter
    __del__ = lambda self : None;
BlockStatCounter_swigregister = _misc.BlockStatCounter_swigregister
BlockStatCounter_swigregister(BlockStatCounter)

# This file is compatible with both classic and new-style classes.


