# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hashes', [dirname(__file__)])
        except ImportError:
            import _hashes
            return _hashes
        if fp is not None:
            try:
                _mod = imp.load_module('_hashes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hashes = swig_import_helper()
    del swig_import_helper
else:
    import _hashes
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def salsaInit(*args):
  return _hashes.salsaInit(*args)
salsaInit = _hashes.salsaInit

def salsaUpdate(*args):
  return _hashes.salsaUpdate(*args)
salsaUpdate = _hashes.salsaUpdate

def salsaDigest(*args):
  return _hashes.salsaDigest(*args)
salsaDigest = _hashes.salsaDigest

def salsaGetSymbol(*args):
  return _hashes.salsaGetSymbol(*args)
salsaGetSymbol = _hashes.salsaGetSymbol
class SalsaHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalsaHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SalsaHash, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _hashes.SalsaHash_init
    if _newclass:init = staticmethod(_hashes.SalsaHash_init)
    __swig_getmethods__["update"] = lambda x: _hashes.SalsaHash_update
    if _newclass:update = staticmethod(_hashes.SalsaHash_update)
    __swig_getmethods__["digest"] = lambda x: _hashes.SalsaHash_digest
    if _newclass:digest = staticmethod(_hashes.SalsaHash_digest)
    def __init__(self): 
        this = _hashes.new_SalsaHash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_SalsaHash
    __del__ = lambda self : None;
SalsaHash_swigregister = _hashes.SalsaHash_swigregister
SalsaHash_swigregister(SalsaHash)

def SalsaHash_init(*args):
  return _hashes.SalsaHash_init(*args)
SalsaHash_init = _hashes.SalsaHash_init

def SalsaHash_update(*args):
  return _hashes.SalsaHash_update(*args)
SalsaHash_update = _hashes.SalsaHash_update

def SalsaHash_digest(*args):
  return _hashes.SalsaHash_digest(*args)
SalsaHash_digest = _hashes.SalsaHash_digest

class SalsaSymbolFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalsaSymbolFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SalsaSymbolFunction, name)
    __repr__ = _swig_repr
    NUM_SYMBOLS_PER_STATE = _hashes.SalsaSymbolFunction_NUM_SYMBOLS_PER_STATE
    __swig_getmethods__["getSymbols"] = lambda x: _hashes.SalsaSymbolFunction_getSymbols
    if _newclass:getSymbols = staticmethod(_hashes.SalsaSymbolFunction_getSymbols)
    def __init__(self): 
        this = _hashes.new_SalsaSymbolFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_SalsaSymbolFunction
    __del__ = lambda self : None;
SalsaSymbolFunction_swigregister = _hashes.SalsaSymbolFunction_swigregister
SalsaSymbolFunction_swigregister(SalsaSymbolFunction)

def SalsaSymbolFunction_getSymbols(*args):
  return _hashes.SalsaSymbolFunction_getSymbols(*args)
SalsaSymbolFunction_getSymbols = _hashes.SalsaSymbolFunction_getSymbols

class Lookup3Hash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lookup3Hash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lookup3Hash, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _hashes.Lookup3Hash_init
    if _newclass:init = staticmethod(_hashes.Lookup3Hash_init)
    __swig_getmethods__["update"] = lambda x: _hashes.Lookup3Hash_update
    if _newclass:update = staticmethod(_hashes.Lookup3Hash_update)
    __swig_getmethods__["digest"] = lambda x: _hashes.Lookup3Hash_digest
    if _newclass:digest = staticmethod(_hashes.Lookup3Hash_digest)
    __swig_getmethods__["digest_extended"] = lambda x: _hashes.Lookup3Hash_digest_extended
    if _newclass:digest_extended = staticmethod(_hashes.Lookup3Hash_digest_extended)
    def __init__(self): 
        this = _hashes.new_Lookup3Hash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_Lookup3Hash
    __del__ = lambda self : None;
Lookup3Hash_swigregister = _hashes.Lookup3Hash_swigregister
Lookup3Hash_swigregister(Lookup3Hash)

def Lookup3Hash_init(*args):
  return _hashes.Lookup3Hash_init(*args)
Lookup3Hash_init = _hashes.Lookup3Hash_init

def Lookup3Hash_update(*args):
  return _hashes.Lookup3Hash_update(*args)
Lookup3Hash_update = _hashes.Lookup3Hash_update

def Lookup3Hash_digest(*args):
  return _hashes.Lookup3Hash_digest(*args)
Lookup3Hash_digest = _hashes.Lookup3Hash_digest

def Lookup3Hash_digest_extended(*args):
  return _hashes.Lookup3Hash_digest_extended(*args)
Lookup3Hash_digest_extended = _hashes.Lookup3Hash_digest_extended

class Lookup3SymbolFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lookup3SymbolFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lookup3SymbolFunction, name)
    __repr__ = _swig_repr
    NUM_SYMBOLS_PER_STATE = _hashes.Lookup3SymbolFunction_NUM_SYMBOLS_PER_STATE
    __swig_getmethods__["getSymbols"] = lambda x: _hashes.Lookup3SymbolFunction_getSymbols
    if _newclass:getSymbols = staticmethod(_hashes.Lookup3SymbolFunction_getSymbols)
    def __init__(self): 
        this = _hashes.new_Lookup3SymbolFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_Lookup3SymbolFunction
    __del__ = lambda self : None;
Lookup3SymbolFunction_swigregister = _hashes.Lookup3SymbolFunction_swigregister
Lookup3SymbolFunction_swigregister(Lookup3SymbolFunction)

def Lookup3SymbolFunction_getSymbols(*args):
  return _hashes.Lookup3SymbolFunction_getSymbols(*args)
Lookup3SymbolFunction_getSymbols = _hashes.Lookup3SymbolFunction_getSymbols

class OneAtATimeHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OneAtATimeHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OneAtATimeHash, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _hashes.OneAtATimeHash_init
    if _newclass:init = staticmethod(_hashes.OneAtATimeHash_init)
    __swig_getmethods__["update"] = lambda x: _hashes.OneAtATimeHash_update
    if _newclass:update = staticmethod(_hashes.OneAtATimeHash_update)
    __swig_getmethods__["digest"] = lambda x: _hashes.OneAtATimeHash_digest
    if _newclass:digest = staticmethod(_hashes.OneAtATimeHash_digest)
    def __init__(self): 
        this = _hashes.new_OneAtATimeHash()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_OneAtATimeHash
    __del__ = lambda self : None;
OneAtATimeHash_swigregister = _hashes.OneAtATimeHash_swigregister
OneAtATimeHash_swigregister(OneAtATimeHash)

def OneAtATimeHash_init(*args):
  return _hashes.OneAtATimeHash_init(*args)
OneAtATimeHash_init = _hashes.OneAtATimeHash_init

def OneAtATimeHash_update(*args):
  return _hashes.OneAtATimeHash_update(*args)
OneAtATimeHash_update = _hashes.OneAtATimeHash_update

def OneAtATimeHash_digest(*args):
  return _hashes.OneAtATimeHash_digest(*args)
OneAtATimeHash_digest = _hashes.OneAtATimeHash_digest

class BitwiseXor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitwiseXor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitwiseXor, name)
    __repr__ = _swig_repr
    __swig_getmethods__["init"] = lambda x: _hashes.BitwiseXor_init
    if _newclass:init = staticmethod(_hashes.BitwiseXor_init)
    __swig_getmethods__["update"] = lambda x: _hashes.BitwiseXor_update
    if _newclass:update = staticmethod(_hashes.BitwiseXor_update)
    __swig_getmethods__["digest"] = lambda x: _hashes.BitwiseXor_digest
    if _newclass:digest = staticmethod(_hashes.BitwiseXor_digest)
    def __init__(self): 
        this = _hashes.new_BitwiseXor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_BitwiseXor
    __del__ = lambda self : None;
BitwiseXor_swigregister = _hashes.BitwiseXor_swigregister
BitwiseXor_swigregister(BitwiseXor)

def BitwiseXor_init(*args):
  return _hashes.BitwiseXor_init(*args)
BitwiseXor_init = _hashes.BitwiseXor_init

def BitwiseXor_update(*args):
  return _hashes.BitwiseXor_update(*args)
BitwiseXor_update = _hashes.BitwiseXor_update

def BitwiseXor_digest(*args):
  return _hashes.BitwiseXor_digest(*args)
BitwiseXor_digest = _hashes.BitwiseXor_digest

class BitwiseXorSymbolFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitwiseXorSymbolFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BitwiseXorSymbolFunction, name)
    __repr__ = _swig_repr
    NUM_SYMBOLS_PER_STATE = _hashes.BitwiseXorSymbolFunction_NUM_SYMBOLS_PER_STATE
    __swig_getmethods__["getSymbols"] = lambda x: _hashes.BitwiseXorSymbolFunction_getSymbols
    if _newclass:getSymbols = staticmethod(_hashes.BitwiseXorSymbolFunction_getSymbols)
    def __init__(self): 
        this = _hashes.new_BitwiseXorSymbolFunction()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_BitwiseXorSymbolFunction
    __del__ = lambda self : None;
BitwiseXorSymbolFunction_swigregister = _hashes.BitwiseXorSymbolFunction_swigregister
BitwiseXorSymbolFunction_swigregister(BitwiseXorSymbolFunction)

def BitwiseXorSymbolFunction_getSymbols(*args):
  return _hashes.BitwiseXorSymbolFunction_getSymbols(*args)
BitwiseXorSymbolFunction_getSymbols = _hashes.BitwiseXorSymbolFunction_getSymbols

class Lookup3UnlimitedHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lookup3UnlimitedHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lookup3UnlimitedHash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hashes.new_Lookup3UnlimitedHash(*args)
        try: self.this.append(this)
        except: self.this = this
    def hash(self, *args): return _hashes.Lookup3UnlimitedHash_hash(self, *args)
    def getSeed(self): return _hashes.Lookup3UnlimitedHash_getSeed(self)
    def next(self): return _hashes.Lookup3UnlimitedHash_next(self)
    __swig_destroy__ = _hashes.delete_Lookup3UnlimitedHash
    __del__ = lambda self : None;
Lookup3UnlimitedHash_swigregister = _hashes.Lookup3UnlimitedHash_swigregister
Lookup3UnlimitedHash_swigregister(Lookup3UnlimitedHash)

class SalsaUnlimitedHash(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SalsaUnlimitedHash, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SalsaUnlimitedHash, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hashes.new_SalsaUnlimitedHash(*args)
        try: self.this.append(this)
        except: self.this = this
    def hash(self, *args): return _hashes.SalsaUnlimitedHash_hash(self, *args)
    def getSeed(self): return _hashes.SalsaUnlimitedHash_getSeed(self)
    def next(self): return _hashes.SalsaUnlimitedHash_next(self)
    __swig_destroy__ = _hashes.delete_SalsaUnlimitedHash
    __del__ = lambda self : None;
SalsaUnlimitedHash_swigregister = _hashes.SalsaUnlimitedHash_swigregister
SalsaUnlimitedHash_swigregister(SalsaUnlimitedHash)

class Lookup3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lookup3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Lookup3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hashes.new_Lookup3(*args)
        try: self.this.append(this)
        except: self.this = this
    def getState(self): return _hashes.Lookup3_getState(self)
    def update(self, *args): return _hashes.Lookup3_update(self, *args)
    def digest(self): return _hashes.Lookup3_digest(self)
    __swig_destroy__ = _hashes.delete_Lookup3
    __del__ = lambda self : None;
Lookup3_swigregister = _hashes.Lookup3_swigregister
Lookup3_swigregister(Lookup3)

class uint32_Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, uint32_Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, uint32_Array, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _hashes.new_uint32_Array(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hashes.delete_uint32_Array
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _hashes.uint32_Array___getitem__(self, *args)
    def __setitem__(self, *args): return _hashes.uint32_Array___setitem__(self, *args)
    def cast(self): return _hashes.uint32_Array_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _hashes.uint32_Array_frompointer
    if _newclass:frompointer = staticmethod(_hashes.uint32_Array_frompointer)
uint32_Array_swigregister = _hashes.uint32_Array_swigregister
uint32_Array_swigregister(uint32_Array)

def uint32_Array_frompointer(*args):
  return _hashes.uint32_Array_frompointer(*args)
uint32_Array_frompointer = _hashes.uint32_Array_frompointer

# SALSA TYPES
def SalsaState():
	return uint32_Array(16)

# This file is compatible with both classic and new-style classes.


