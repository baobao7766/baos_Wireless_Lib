# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spinal', [dirname(__file__)])
        except ImportError:
            import _spinal
            return _spinal
        if fp is not None:
            try:
                _mod = imp.load_module('_spinal', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _spinal = swig_import_helper()
    del swig_import_helper
else:
    import _spinal
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spinal.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _spinal.SwigPyIterator_value(self)
    def incr(self, n=1): return _spinal.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _spinal.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _spinal.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _spinal.SwigPyIterator_equal(self, *args)
    def copy(self): return _spinal.SwigPyIterator_copy(self)
    def next(self): return _spinal.SwigPyIterator_next(self)
    def __next__(self): return _spinal.SwigPyIterator___next__(self)
    def previous(self): return _spinal.SwigPyIterator_previous(self)
    def advance(self, *args): return _spinal.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _spinal.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _spinal.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _spinal.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _spinal.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _spinal.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _spinal.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _spinal.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _spinal.SHARED_PTR_DISOWN
import wireless.general
import wireless.codes
import wireless.demappers
import wireless.mappers
import wireless.itpp.modulator
import wireless.itpp.base_vec
class IntegerEuclidianDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntegerEuclidianDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerEuclidianDistance, name)
    __repr__ = _swig_repr
    __swig_getmethods__["dist"] = lambda x: _spinal.IntegerEuclidianDistance_dist
    if _newclass:dist = staticmethod(_spinal.IntegerEuclidianDistance_dist)
    def __init__(self): 
        this = _spinal.new_IntegerEuclidianDistance()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinal.delete_IntegerEuclidianDistance
    __del__ = lambda self : None;
IntegerEuclidianDistance_swigregister = _spinal.IntegerEuclidianDistance_swigregister
IntegerEuclidianDistance_swigregister(IntegerEuclidianDistance)

def IntegerEuclidianDistance_dist(*args):
  return _spinal.IntegerEuclidianDistance_dist(*args)
IntegerEuclidianDistance_dist = _spinal.IntegerEuclidianDistance_dist

class SoftEuclidianDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftEuclidianDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftEuclidianDistance, name)
    __repr__ = _swig_repr
    __swig_getmethods__["dist"] = lambda x: _spinal.SoftEuclidianDistance_dist
    if _newclass:dist = staticmethod(_spinal.SoftEuclidianDistance_dist)
    def __init__(self): 
        this = _spinal.new_SoftEuclidianDistance()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinal.delete_SoftEuclidianDistance
    __del__ = lambda self : None;
SoftEuclidianDistance_swigregister = _spinal.SoftEuclidianDistance_swigregister
SoftEuclidianDistance_swigregister(SoftEuclidianDistance)

def SoftEuclidianDistance_dist(*args):
  return _spinal.SoftEuclidianDistance_dist(*args)
SoftEuclidianDistance_dist = _spinal.SoftEuclidianDistance_dist

class HammingDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HammingDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HammingDistance, name)
    __repr__ = _swig_repr
    __swig_getmethods__["dist"] = lambda x: _spinal.HammingDistance_dist
    if _newclass:dist = staticmethod(_spinal.HammingDistance_dist)
    def __init__(self): 
        this = _spinal.new_HammingDistance()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinal.delete_HammingDistance
    __del__ = lambda self : None;
HammingDistance_swigregister = _spinal.HammingDistance_swigregister
HammingDistance_swigregister(HammingDistance)

def HammingDistance_dist(*args):
  return _spinal.HammingDistance_dist(*args)
HammingDistance_dist = _spinal.HammingDistance_dist

class FadingEuclidianDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadingEuclidianDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FadingEuclidianDistance, name)
    __repr__ = _swig_repr
    __swig_getmethods__["dist"] = lambda x: _spinal.FadingEuclidianDistance_dist
    if _newclass:dist = staticmethod(_spinal.FadingEuclidianDistance_dist)
    def __init__(self): 
        this = _spinal.new_FadingEuclidianDistance()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinal.delete_FadingEuclidianDistance
    __del__ = lambda self : None;
FadingEuclidianDistance_swigregister = _spinal.FadingEuclidianDistance_swigregister
FadingEuclidianDistance_swigregister(FadingEuclidianDistance)

def FadingEuclidianDistance_dist(*args):
  return _spinal.FadingEuclidianDistance_dist(*args)
FadingEuclidianDistance_dist = _spinal.FadingEuclidianDistance_dist

class SpinalIntermediateResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpinalIntermediateResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SpinalIntermediateResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _spinal.SpinalIntermediateResult_path_set
    __swig_getmethods__["path"] = _spinal.SpinalIntermediateResult_path_get
    if _newclass:path = _swig_property(_spinal.SpinalIntermediateResult_path_get, _spinal.SpinalIntermediateResult_path_set)
    __swig_setmethods__["spineValue"] = _spinal.SpinalIntermediateResult_spineValue_set
    __swig_getmethods__["spineValue"] = _spinal.SpinalIntermediateResult_spineValue_get
    if _newclass:spineValue = _swig_property(_spinal.SpinalIntermediateResult_spineValue_get, _spinal.SpinalIntermediateResult_spineValue_set)
    __swig_setmethods__["weight"] = _spinal.SpinalIntermediateResult_weight_set
    __swig_getmethods__["weight"] = _spinal.SpinalIntermediateResult_weight_get
    if _newclass:weight = _swig_property(_spinal.SpinalIntermediateResult_weight_get, _spinal.SpinalIntermediateResult_weight_set)
    def __init__(self): 
        this = _spinal.new_SpinalIntermediateResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinal.delete_SpinalIntermediateResult
    __del__ = lambda self : None;
SpinalIntermediateResult_swigregister = _spinal.SpinalIntermediateResult_swigregister
SpinalIntermediateResult_swigregister(SpinalIntermediateResult)

class SpinalDecodeResult(wireless.codes.DecodeResult):
    __swig_setmethods__ = {}
    for _s in [wireless.codes.DecodeResult]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpinalDecodeResult, name, value)
    __swig_getmethods__ = {}
    for _s in [wireless.codes.DecodeResult]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpinalDecodeResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spinal.new_SpinalDecodeResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["weights"] = _spinal.SpinalDecodeResult_weights_set
    __swig_getmethods__["weights"] = _spinal.SpinalDecodeResult_weights_get
    if _newclass:weights = _swig_property(_spinal.SpinalDecodeResult_weights_get, _spinal.SpinalDecodeResult_weights_set)
    __swig_destroy__ = _spinal.delete_SpinalDecodeResult
    __del__ = lambda self : None;
SpinalDecodeResult_swigregister = _spinal.SpinalDecodeResult_swigregister
SpinalDecodeResult_swigregister(SpinalDecodeResult)

class StridedProtocol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StridedProtocol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StridedProtocol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spinal.new_StridedProtocol(*args)
        try: self.this.append(this)
        except: self.this = this
    def numSymbolsNextDecode(self, *args): return _spinal.StridedProtocol_numSymbolsNextDecode(self, *args)
    def setResult(self, *args): return _spinal.StridedProtocol_setResult(self, *args)
    def resetPacket(self, *args): return _spinal.StridedProtocol_resetPacket(self, *args)
    __swig_destroy__ = _spinal.delete_StridedProtocol
    __del__ = lambda self : None;
StridedProtocol_swigregister = _spinal.StridedProtocol_swigregister
StridedProtocol_swigregister(StridedProtocol)

class StubHashDecoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StubHashDecoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StubHashDecoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spinal.new_StubHashDecoder(*args)
        try: self.this.append(this)
        except: self.this = this
    def decode(self, *args): return _spinal.StubHashDecoder_decode(self, *args)
    def numSymbolsPerPass(self): return _spinal.StubHashDecoder_numSymbolsPerPass(self)
    __swig_setmethods__["lastCallNumPasses"] = _spinal.StubHashDecoder_lastCallNumPasses_set
    __swig_getmethods__["lastCallNumPasses"] = _spinal.StubHashDecoder_lastCallNumPasses_get
    if _newclass:lastCallNumPasses = _swig_property(_spinal.StubHashDecoder_lastCallNumPasses_get, _spinal.StubHashDecoder_lastCallNumPasses_set)
    __swig_setmethods__["lastCallSymbols"] = _spinal.StubHashDecoder_lastCallSymbols_set
    __swig_getmethods__["lastCallSymbols"] = _spinal.StubHashDecoder_lastCallSymbols_get
    if _newclass:lastCallSymbols = _swig_property(_spinal.StubHashDecoder_lastCallSymbols_get, _spinal.StubHashDecoder_lastCallSymbols_set)
    __swig_destroy__ = _spinal.delete_StubHashDecoder
    __del__ = lambda self : None;
StubHashDecoder_swigregister = _spinal.StubHashDecoder_swigregister
StubHashDecoder_swigregister(StubHashDecoder)

class CodeFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spinal.new_CodeFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    def salsa(self): return _spinal.CodeFactory_salsa(self)
    def lookup3(self): return _spinal.CodeFactory_lookup3(self)
    def oneAtATime(self): return _spinal.CodeFactory_oneAtATime(self)
    __swig_destroy__ = _spinal.delete_CodeFactory
    __del__ = lambda self : None;
CodeFactory_swigregister = _spinal.CodeFactory_swigregister
CodeFactory_swigregister(CodeFactory)

class IEncoderFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEncoderFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEncoderFactory, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spinal.delete_IEncoderFactory
    __del__ = lambda self : None;
    def encoder(self): return _spinal.IEncoderFactory_encoder(self)
    def linear(self, *args): return _spinal.IEncoderFactory_linear(self, *args)
    def soft(self, *args): return _spinal.IEncoderFactory_soft(self, *args)
    def gaussian(self, *args): return _spinal.IEncoderFactory_gaussian(self, *args)
    def bitwise(self, *args): return _spinal.IEncoderFactory_bitwise(self, *args)
    def coherence(self, *args): return _spinal.IEncoderFactory_coherence(self, *args)
IEncoderFactory_swigregister = _spinal.IEncoderFactory_swigregister
IEncoderFactory_swigregister(IEncoderFactory)

class IntermediateVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntermediateVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntermediateVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _spinal.IntermediateVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _spinal.IntermediateVector___nonzero__(self)
    def __bool__(self): return _spinal.IntermediateVector___bool__(self)
    def __len__(self): return _spinal.IntermediateVector___len__(self)
    def pop(self): return _spinal.IntermediateVector_pop(self)
    def __getslice__(self, *args): return _spinal.IntermediateVector___getslice__(self, *args)
    def __setslice__(self, *args): return _spinal.IntermediateVector___setslice__(self, *args)
    def __delslice__(self, *args): return _spinal.IntermediateVector___delslice__(self, *args)
    def __delitem__(self, *args): return _spinal.IntermediateVector___delitem__(self, *args)
    def __getitem__(self, *args): return _spinal.IntermediateVector___getitem__(self, *args)
    def __setitem__(self, *args): return _spinal.IntermediateVector___setitem__(self, *args)
    def append(self, *args): return _spinal.IntermediateVector_append(self, *args)
    def empty(self): return _spinal.IntermediateVector_empty(self)
    def size(self): return _spinal.IntermediateVector_size(self)
    def clear(self): return _spinal.IntermediateVector_clear(self)
    def swap(self, *args): return _spinal.IntermediateVector_swap(self, *args)
    def get_allocator(self): return _spinal.IntermediateVector_get_allocator(self)
    def begin(self): return _spinal.IntermediateVector_begin(self)
    def end(self): return _spinal.IntermediateVector_end(self)
    def rbegin(self): return _spinal.IntermediateVector_rbegin(self)
    def rend(self): return _spinal.IntermediateVector_rend(self)
    def pop_back(self): return _spinal.IntermediateVector_pop_back(self)
    def erase(self, *args): return _spinal.IntermediateVector_erase(self, *args)
    def __init__(self, *args): 
        this = _spinal.new_IntermediateVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _spinal.IntermediateVector_push_back(self, *args)
    def front(self): return _spinal.IntermediateVector_front(self)
    def back(self): return _spinal.IntermediateVector_back(self)
    def assign(self, *args): return _spinal.IntermediateVector_assign(self, *args)
    def resize(self, *args): return _spinal.IntermediateVector_resize(self, *args)
    def insert(self, *args): return _spinal.IntermediateVector_insert(self, *args)
    def reserve(self, *args): return _spinal.IntermediateVector_reserve(self, *args)
    def capacity(self): return _spinal.IntermediateVector_capacity(self)
    __swig_destroy__ = _spinal.delete_IntermediateVector
    __del__ = lambda self : None;
IntermediateVector_swigregister = _spinal.IntermediateVector_swigregister
IntermediateVector_swigregister(IntermediateVector)

class template_IHashDecoder_Symbol(wireless.codes.template_IMultiStreamDecoder_Symbol):
    __swig_setmethods__ = {}
    for _s in [wireless.codes.template_IMultiStreamDecoder_Symbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IHashDecoder_Symbol, name, value)
    __swig_getmethods__ = {}
    for _s in [wireless.codes.template_IMultiStreamDecoder_Symbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, template_IHashDecoder_Symbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def decodeExtended(self): return _spinal.template_IHashDecoder_Symbol_decodeExtended(self)
    __swig_destroy__ = _spinal.delete_template_IHashDecoder_Symbol
    __del__ = lambda self : None;
template_IHashDecoder_Symbol_swigregister = _spinal.template_IHashDecoder_Symbol_swigregister
template_IHashDecoder_Symbol_swigregister(template_IHashDecoder_Symbol)

class template_ISearchFactory_Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_ISearchFactory_Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_ISearchFactory_Symbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spinal.delete_template_ISearchFactory_Symbol
    __del__ = lambda self : None;
    def beamDecoder(self, *args): return _spinal.template_ISearchFactory_Symbol_beamDecoder(self, *args)
    def lookaheadBeamDecoder(self, *args): return _spinal.template_ISearchFactory_Symbol_lookaheadBeamDecoder(self, *args)
template_ISearchFactory_Symbol_swigregister = _spinal.template_ISearchFactory_Symbol_swigregister
template_ISearchFactory_Symbol_swigregister(template_ISearchFactory_Symbol)

class template_IHashDecoder_SoftSymbol(wireless.codes.template_IMultiStreamDecoder_SoftSymbol):
    __swig_setmethods__ = {}
    for _s in [wireless.codes.template_IMultiStreamDecoder_SoftSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IHashDecoder_SoftSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [wireless.codes.template_IMultiStreamDecoder_SoftSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, template_IHashDecoder_SoftSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def decodeExtended(self): return _spinal.template_IHashDecoder_SoftSymbol_decodeExtended(self)
    __swig_destroy__ = _spinal.delete_template_IHashDecoder_SoftSymbol
    __del__ = lambda self : None;
template_IHashDecoder_SoftSymbol_swigregister = _spinal.template_IHashDecoder_SoftSymbol_swigregister
template_IHashDecoder_SoftSymbol_swigregister(template_IHashDecoder_SoftSymbol)

class template_ISearchFactory_SoftSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_ISearchFactory_SoftSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_ISearchFactory_SoftSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spinal.delete_template_ISearchFactory_SoftSymbol
    __del__ = lambda self : None;
    def beamDecoder(self, *args): return _spinal.template_ISearchFactory_SoftSymbol_beamDecoder(self, *args)
    def lookaheadBeamDecoder(self, *args): return _spinal.template_ISearchFactory_SoftSymbol_lookaheadBeamDecoder(self, *args)
template_ISearchFactory_SoftSymbol_swigregister = _spinal.template_ISearchFactory_SoftSymbol_swigregister
template_ISearchFactory_SoftSymbol_swigregister(template_ISearchFactory_SoftSymbol)

class template_IHashDecoder_Fading(wireless.codes.template_IMultiStreamDecoder_FadingSymbol):
    __swig_setmethods__ = {}
    for _s in [wireless.codes.template_IMultiStreamDecoder_FadingSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IHashDecoder_Fading, name, value)
    __swig_getmethods__ = {}
    for _s in [wireless.codes.template_IMultiStreamDecoder_FadingSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, template_IHashDecoder_Fading, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def decodeExtended(self): return _spinal.template_IHashDecoder_Fading_decodeExtended(self)
    __swig_destroy__ = _spinal.delete_template_IHashDecoder_Fading
    __del__ = lambda self : None;
template_IHashDecoder_Fading_swigregister = _spinal.template_IHashDecoder_Fading_swigregister
template_IHashDecoder_Fading_swigregister(template_IHashDecoder_Fading)

class template_ISearchFactory_Fading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_ISearchFactory_Fading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_ISearchFactory_Fading, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _spinal.delete_template_ISearchFactory_Fading
    __del__ = lambda self : None;
    def beamDecoder(self, *args): return _spinal.template_ISearchFactory_Fading_beamDecoder(self, *args)
    def lookaheadBeamDecoder(self, *args): return _spinal.template_ISearchFactory_Fading_lookaheadBeamDecoder(self, *args)
template_ISearchFactory_Fading_swigregister = _spinal.template_ISearchFactory_Fading_swigregister
template_ISearchFactory_Fading_swigregister(template_ISearchFactory_Fading)

class SymbolFlatSymbolStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolFlatSymbolStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolFlatSymbolStorage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _spinal.new_SymbolFlatSymbolStorage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _spinal.delete_SymbolFlatSymbolStorage
    __del__ = lambda self : None;
    def reset(self): return _spinal.SymbolFlatSymbolStorage_reset(self)
    def add(self, *args): return _spinal.SymbolFlatSymbolStorage_add(self, *args)
    def get(self, *args): return _spinal.SymbolFlatSymbolStorage_get(self, *args)
    def size(self, *args): return _spinal.SymbolFlatSymbolStorage_size(self, *args)
SymbolFlatSymbolStorage_swigregister = _spinal.SymbolFlatSymbolStorage_swigregister
SymbolFlatSymbolStorage_swigregister(SymbolFlatSymbolStorage)

# This file is compatible with both classic and new-style classes.


