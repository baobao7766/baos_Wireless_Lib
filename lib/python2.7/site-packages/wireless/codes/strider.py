# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_strider', [dirname(__file__)])
        except ImportError:
            import _strider
            return _strider
        if fp is not None:
            try:
                _mod = imp.load_module('_strider', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _strider = swig_import_helper()
    del swig_import_helper
else:
    import _strider
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _strider.SHARED_PTR_DISOWN
import wireless.codes
import wireless.general
import wireless.demappers
import wireless.mappers
import wireless.itpp.modulator
import wireless.itpp.base_vec
class LayeredEncoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayeredEncoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayeredEncoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _strider.new_LayeredEncoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _strider.delete_LayeredEncoder
    __del__ = lambda self : None;
    def setPacket(self, *args): return _strider.LayeredEncoder_setPacket(self, *args)
    def encode(self, *args): return _strider.LayeredEncoder_encode(self, *args)
LayeredEncoder_swigregister = _strider.LayeredEncoder_swigregister
LayeredEncoder_swigregister(LayeredEncoder)

class LayerSuperposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerSuperposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerSuperposition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _strider.new_LayerSuperposition(*args)
        try: self.this.append(this)
        except: self.this = this
    def setLayer(self, *args): return _strider.LayerSuperposition_setLayer(self, *args)
    def reset(self): return _strider.LayerSuperposition_reset(self)
    def next(self): return _strider.LayerSuperposition_next(self)
    __swig_destroy__ = _strider.delete_LayerSuperposition
    __del__ = lambda self : None;
LayerSuperposition_swigregister = _strider.LayerSuperposition_swigregister
LayerSuperposition_swigregister(LayerSuperposition)

class StriderTurboCode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StriderTurboCode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StriderTurboCode, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createEncoder"] = lambda x: _strider.StriderTurboCode_createEncoder
    if _newclass:createEncoder = staticmethod(_strider.StriderTurboCode_createEncoder)
    __swig_getmethods__["createDecoder"] = lambda x: _strider.StriderTurboCode_createDecoder
    if _newclass:createDecoder = staticmethod(_strider.StriderTurboCode_createDecoder)
    def __init__(self): 
        this = _strider.new_StriderTurboCode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _strider.delete_StriderTurboCode
    __del__ = lambda self : None;
StriderTurboCode_swigregister = _strider.StriderTurboCode_swigregister
StriderTurboCode_swigregister(StriderTurboCode)

def StriderTurboCode_createEncoder(*args):
  return _strider.StriderTurboCode_createEncoder(*args)
StriderTurboCode_createEncoder = _strider.StriderTurboCode_createEncoder

def StriderTurboCode_createDecoder(*args):
  return _strider.StriderTurboCode_createDecoder(*args)
StriderTurboCode_createDecoder = _strider.StriderTurboCode_createDecoder


def getStriderGeneratorMatrix(*args):
  return _strider.getStriderGeneratorMatrix(*args)
getStriderGeneratorMatrix = _strider.getStriderGeneratorMatrix
class StriderFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StriderFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StriderFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["createEncoder"] = lambda x: _strider.StriderFactory_createEncoder
    if _newclass:createEncoder = staticmethod(_strider.StriderFactory_createEncoder)
    __swig_getmethods__["createDecoder"] = lambda x: _strider.StriderFactory_createDecoder
    if _newclass:createDecoder = staticmethod(_strider.StriderFactory_createDecoder)
    __swig_getmethods__["createFadingDecoder"] = lambda x: _strider.StriderFactory_createFadingDecoder
    if _newclass:createFadingDecoder = staticmethod(_strider.StriderFactory_createFadingDecoder)
    def __init__(self): 
        this = _strider.new_StriderFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _strider.delete_StriderFactory
    __del__ = lambda self : None;
StriderFactory_swigregister = _strider.StriderFactory_swigregister
StriderFactory_swigregister(StriderFactory)

def StriderFactory_createEncoder(*args):
  return _strider.StriderFactory_createEncoder(*args)
StriderFactory_createEncoder = _strider.StriderFactory_createEncoder

def StriderFactory_createDecoder(*args):
  return _strider.StriderFactory_createDecoder(*args)
StriderFactory_createDecoder = _strider.StriderFactory_createDecoder

def StriderFactory_createFadingDecoder(*args):
  return _strider.StriderFactory_createFadingDecoder(*args)
StriderFactory_createFadingDecoder = _strider.StriderFactory_createFadingDecoder

class ComplexLayeredDecoder(wireless.codes.template_IDecoder_ComplexSymbol):
    __swig_setmethods__ = {}
    for _s in [wireless.codes.template_IDecoder_ComplexSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexLayeredDecoder, name, value)
    __swig_getmethods__ = {}
    for _s in [wireless.codes.template_IDecoder_ComplexSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexLayeredDecoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _strider.new_ComplexLayeredDecoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _strider.delete_ComplexLayeredDecoder
    __del__ = lambda self : None;
    def reset(self): return _strider.ComplexLayeredDecoder_reset(self)
    def add(self, *args): return _strider.ComplexLayeredDecoder_add(self, *args)
    def decode(self): return _strider.ComplexLayeredDecoder_decode(self)
ComplexLayeredDecoder_swigregister = _strider.ComplexLayeredDecoder_swigregister
ComplexLayeredDecoder_swigregister(ComplexLayeredDecoder)

# This file is compatible with both classic and new-style classes.


