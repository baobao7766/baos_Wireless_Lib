# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_codes', [dirname(__file__)])
        except ImportError:
            import _codes
            return _codes
        if fp is not None:
            try:
                _mod = imp.load_module('_codes', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _codes = swig_import_helper()
    del swig_import_helper
else:
    import _codes
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _codes.SwigPyIterator_value(self)
    def incr(self, n=1): return _codes.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _codes.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _codes.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _codes.SwigPyIterator_equal(self, *args)
    def copy(self): return _codes.SwigPyIterator_copy(self)
    def next(self): return _codes.SwigPyIterator_next(self)
    def __next__(self): return _codes.SwigPyIterator___next__(self)
    def previous(self): return _codes.SwigPyIterator_previous(self)
    def advance(self, *args): return _codes.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _codes.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _codes.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _codes.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _codes.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _codes.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _codes.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _codes.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _codes.SHARED_PTR_DISOWN
import wireless.general
class ILLRDecoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILLRDecoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILLRDecoder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_ILLRDecoder
    __del__ = lambda self : None;
    def reset(self): return _codes.ILLRDecoder_reset(self)
    def add(self, *args): return _codes.ILLRDecoder_add(self, *args)
    def decode(self): return _codes.ILLRDecoder_decode(self)
ILLRDecoder_swigregister = _codes.ILLRDecoder_swigregister
ILLRDecoder_swigregister(ILLRDecoder)

class DecodeResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecodeResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DecodeResult, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_DecodeResult(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["packet"] = _codes.DecodeResult_packet_set
    __swig_getmethods__["packet"] = _codes.DecodeResult_packet_get
    if _newclass:packet = _swig_property(_codes.DecodeResult_packet_get, _codes.DecodeResult_packet_set)
    __swig_setmethods__["logProbError"] = _codes.DecodeResult_logProbError_set
    __swig_getmethods__["logProbError"] = _codes.DecodeResult_logProbError_get
    if _newclass:logProbError = _swig_property(_codes.DecodeResult_logProbError_get, _codes.DecodeResult_logProbError_set)
    __swig_destroy__ = _codes.delete_DecodeResult
    __del__ = lambda self : None;
DecodeResult_swigregister = _codes.DecodeResult_swigregister
DecodeResult_swigregister(DecodeResult)

class IEncoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IEncoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IEncoder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_IEncoder
    __del__ = lambda self : None;
    def setPacket(self, *args): return _codes.IEncoder_setPacket(self, *args)
    def encode(self, *args): return _codes.IEncoder_encode(self, *args)
IEncoder_swigregister = _codes.IEncoder_swigregister
IEncoder_swigregister(IEncoder)

class InterleavedEncoder(IEncoder):
    __swig_setmethods__ = {}
    for _s in [IEncoder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InterleavedEncoder, name, value)
    __swig_getmethods__ = {}
    for _s in [IEncoder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InterleavedEncoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_InterleavedEncoder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _codes.delete_InterleavedEncoder
    __del__ = lambda self : None;
    def setPacket(self, *args): return _codes.InterleavedEncoder_setPacket(self, *args)
    def encode(self, *args): return _codes.InterleavedEncoder_encode(self, *args)
InterleavedEncoder_swigregister = _codes.InterleavedEncoder_swigregister
InterleavedEncoder_swigregister(InterleavedEncoder)

class EncoderMultiplexer(IEncoder):
    __swig_setmethods__ = {}
    for _s in [IEncoder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EncoderMultiplexer, name, value)
    __swig_getmethods__ = {}
    for _s in [IEncoder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EncoderMultiplexer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_EncoderMultiplexer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _codes.delete_EncoderMultiplexer
    __del__ = lambda self : None;
    def setPacket(self, *args): return _codes.EncoderMultiplexer_setPacket(self, *args)
    def encode(self, *args): return _codes.EncoderMultiplexer_encode(self, *args)
EncoderMultiplexer_swigregister = _codes.EncoderMultiplexer_swigregister
EncoderMultiplexer_swigregister(EncoderMultiplexer)

class RandomPermutationGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RandomPermutationGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RandomPermutationGenerator, name)
    __repr__ = _swig_repr
    SEED_SIZE_UINTS = _codes.RandomPermutationGenerator_SEED_SIZE_UINTS
    def __init__(self, *args): 
        this = _codes.new_RandomPermutationGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _codes.delete_RandomPermutationGenerator
    __del__ = lambda self : None;
    def reset(self, *args): return _codes.RandomPermutationGenerator_reset(self, *args)
    def next(self): return _codes.RandomPermutationGenerator_next(self)
RandomPermutationGenerator_swigregister = _codes.RandomPermutationGenerator_swigregister
RandomPermutationGenerator_swigregister(RandomPermutationGenerator)

class IMultiStreamEncoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IMultiStreamEncoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IMultiStreamEncoder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_IMultiStreamEncoder
    __del__ = lambda self : None;
    def setPacket(self, *args): return _codes.IMultiStreamEncoder_setPacket(self, *args)
    def encode(self, *args): return _codes.IMultiStreamEncoder_encode(self, *args)
IMultiStreamEncoder_swigregister = _codes.IMultiStreamEncoder_swigregister
IMultiStreamEncoder_swigregister(IMultiStreamEncoder)

class MultiToSingleStreamEncoder(IEncoder):
    __swig_setmethods__ = {}
    for _s in [IEncoder]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiToSingleStreamEncoder, name, value)
    __swig_getmethods__ = {}
    for _s in [IEncoder]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiToSingleStreamEncoder, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_MultiToSingleStreamEncoder(*args)
        try: self.this.append(this)
        except: self.this = this
    def setPacket(self, *args): return _codes.MultiToSingleStreamEncoder_setPacket(self, *args)
    def encode(self, *args): return _codes.MultiToSingleStreamEncoder_encode(self, *args)
    __swig_destroy__ = _codes.delete_MultiToSingleStreamEncoder
    __del__ = lambda self : None;
MultiToSingleStreamEncoder_swigregister = _codes.MultiToSingleStreamEncoder_swigregister
MultiToSingleStreamEncoder_swigregister(MultiToSingleStreamEncoder)

import wireless.demappers
import wireless.mappers
import wireless.itpp.modulator
import wireless.itpp.base_vec
class IPuncturingSchedule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IPuncturingSchedule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IPuncturingSchedule, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_IPuncturingSchedule
    __del__ = lambda self : None;
    def reset(self): return _codes.IPuncturingSchedule_reset(self)
    def batchNext(self, *args): return _codes.IPuncturingSchedule_batchNext(self, *args)
IPuncturingSchedule_swigregister = _codes.IPuncturingSchedule_swigregister
IPuncturingSchedule_swigregister(IPuncturingSchedule)

class StridedPuncturingSchedule(IPuncturingSchedule):
    __swig_setmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StridedPuncturingSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StridedPuncturingSchedule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_StridedPuncturingSchedule(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.StridedPuncturingSchedule_reset(self)
    def batchNext(self, *args): return _codes.StridedPuncturingSchedule_batchNext(self, *args)
    def next(self): return _codes.StridedPuncturingSchedule_next(self)
    __swig_destroy__ = _codes.delete_StridedPuncturingSchedule
    __del__ = lambda self : None;
StridedPuncturingSchedule_swigregister = _codes.StridedPuncturingSchedule_swigregister
StridedPuncturingSchedule_swigregister(StridedPuncturingSchedule)

class StaticPuncturingSchedule(IPuncturingSchedule):
    __swig_setmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticPuncturingSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StaticPuncturingSchedule, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _codes.new_StaticPuncturingSchedule()
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.StaticPuncturingSchedule_reset(self)
    def batchNext(self, *args): return _codes.StaticPuncturingSchedule_batchNext(self, *args)
    def next(self): return _codes.StaticPuncturingSchedule_next(self)
    def set(self, *args): return _codes.StaticPuncturingSchedule_set(self, *args)
    __swig_destroy__ = _codes.delete_StaticPuncturingSchedule
    __del__ = lambda self : None;
StaticPuncturingSchedule_swigregister = _codes.StaticPuncturingSchedule_swigregister
StaticPuncturingSchedule_swigregister(StaticPuncturingSchedule)

class RepeatingPuncturingSchedule(IPuncturingSchedule):
    __swig_setmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RepeatingPuncturingSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RepeatingPuncturingSchedule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_RepeatingPuncturingSchedule(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.RepeatingPuncturingSchedule_reset(self)
    def batchNext(self, *args): return _codes.RepeatingPuncturingSchedule_batchNext(self, *args)
    __swig_destroy__ = _codes.delete_RepeatingPuncturingSchedule
    __del__ = lambda self : None;
RepeatingPuncturingSchedule_swigregister = _codes.RepeatingPuncturingSchedule_swigregister
RepeatingPuncturingSchedule_swigregister(RepeatingPuncturingSchedule)

class RoundRobinPuncturingSchedule(IPuncturingSchedule):
    __swig_setmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundRobinPuncturingSchedule, name, value)
    __swig_getmethods__ = {}
    for _s in [IPuncturingSchedule]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoundRobinPuncturingSchedule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_RoundRobinPuncturingSchedule(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.RoundRobinPuncturingSchedule_reset(self)
    def batchNext(self, *args): return _codes.RoundRobinPuncturingSchedule_batchNext(self, *args)
    __swig_destroy__ = _codes.delete_RoundRobinPuncturingSchedule
    __del__ = lambda self : None;
RoundRobinPuncturingSchedule_swigregister = _codes.RoundRobinPuncturingSchedule_swigregister
RoundRobinPuncturingSchedule_swigregister(RoundRobinPuncturingSchedule)

class template_IDecoder_Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDecoder_Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDecoder_Symbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IDecoder_Symbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IDecoder_Symbol_reset(self)
    def add(self, *args): return _codes.template_IDecoder_Symbol_add(self, *args)
    def decode(self): return _codes.template_IDecoder_Symbol_decode(self)
template_IDecoder_Symbol_swigregister = _codes.template_IDecoder_Symbol_swigregister
template_IDecoder_Symbol_swigregister(template_IDecoder_Symbol)

class template_IDecoder_SoftSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDecoder_SoftSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDecoder_SoftSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IDecoder_SoftSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IDecoder_SoftSymbol_reset(self)
    def add(self, *args): return _codes.template_IDecoder_SoftSymbol_add(self, *args)
    def decode(self): return _codes.template_IDecoder_SoftSymbol_decode(self)
template_IDecoder_SoftSymbol_swigregister = _codes.template_IDecoder_SoftSymbol_swigregister
template_IDecoder_SoftSymbol_swigregister(template_IDecoder_SoftSymbol)

class template_IDecoder_ComplexSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDecoder_ComplexSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDecoder_ComplexSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IDecoder_ComplexSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IDecoder_ComplexSymbol_reset(self)
    def add(self, *args): return _codes.template_IDecoder_ComplexSymbol_add(self, *args)
    def decode(self): return _codes.template_IDecoder_ComplexSymbol_decode(self)
template_IDecoder_ComplexSymbol_swigregister = _codes.template_IDecoder_ComplexSymbol_swigregister
template_IDecoder_ComplexSymbol_swigregister(template_IDecoder_ComplexSymbol)

class template_IDecoder_FadingSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDecoder_FadingSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDecoder_FadingSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IDecoder_FadingSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IDecoder_FadingSymbol_reset(self)
    def add(self, *args): return _codes.template_IDecoder_FadingSymbol_add(self, *args)
    def decode(self): return _codes.template_IDecoder_FadingSymbol_decode(self)
template_IDecoder_FadingSymbol_swigregister = _codes.template_IDecoder_FadingSymbol_swigregister
template_IDecoder_FadingSymbol_swigregister(template_IDecoder_FadingSymbol)

class template_IDecoder_FadingComplexSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IDecoder_FadingComplexSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IDecoder_FadingComplexSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IDecoder_FadingComplexSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IDecoder_FadingComplexSymbol_reset(self)
    def add(self, *args): return _codes.template_IDecoder_FadingComplexSymbol_add(self, *args)
    def decode(self): return _codes.template_IDecoder_FadingComplexSymbol_decode(self)
template_IDecoder_FadingComplexSymbol_swigregister = _codes.template_IDecoder_FadingComplexSymbol_swigregister
template_IDecoder_FadingComplexSymbol_swigregister(template_IDecoder_FadingComplexSymbol)

class template_IMultiStreamDecoder_Symbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IMultiStreamDecoder_Symbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IMultiStreamDecoder_Symbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IMultiStreamDecoder_Symbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IMultiStreamDecoder_Symbol_reset(self)
    def add(self, *args): return _codes.template_IMultiStreamDecoder_Symbol_add(self, *args)
    def decode(self): return _codes.template_IMultiStreamDecoder_Symbol_decode(self)
template_IMultiStreamDecoder_Symbol_swigregister = _codes.template_IMultiStreamDecoder_Symbol_swigregister
template_IMultiStreamDecoder_Symbol_swigregister(template_IMultiStreamDecoder_Symbol)

class template_IMultiStreamDecoder_SoftSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IMultiStreamDecoder_SoftSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IMultiStreamDecoder_SoftSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IMultiStreamDecoder_SoftSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IMultiStreamDecoder_SoftSymbol_reset(self)
    def add(self, *args): return _codes.template_IMultiStreamDecoder_SoftSymbol_add(self, *args)
    def decode(self): return _codes.template_IMultiStreamDecoder_SoftSymbol_decode(self)
template_IMultiStreamDecoder_SoftSymbol_swigregister = _codes.template_IMultiStreamDecoder_SoftSymbol_swigregister
template_IMultiStreamDecoder_SoftSymbol_swigregister(template_IMultiStreamDecoder_SoftSymbol)

class template_IMultiStreamDecoder_ComplexSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IMultiStreamDecoder_ComplexSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IMultiStreamDecoder_ComplexSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IMultiStreamDecoder_ComplexSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IMultiStreamDecoder_ComplexSymbol_reset(self)
    def add(self, *args): return _codes.template_IMultiStreamDecoder_ComplexSymbol_add(self, *args)
    def decode(self): return _codes.template_IMultiStreamDecoder_ComplexSymbol_decode(self)
template_IMultiStreamDecoder_ComplexSymbol_swigregister = _codes.template_IMultiStreamDecoder_ComplexSymbol_swigregister
template_IMultiStreamDecoder_ComplexSymbol_swigregister(template_IMultiStreamDecoder_ComplexSymbol)

class template_IMultiStreamDecoder_FadingSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IMultiStreamDecoder_FadingSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IMultiStreamDecoder_FadingSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IMultiStreamDecoder_FadingSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IMultiStreamDecoder_FadingSymbol_reset(self)
    def add(self, *args): return _codes.template_IMultiStreamDecoder_FadingSymbol_add(self, *args)
    def decode(self): return _codes.template_IMultiStreamDecoder_FadingSymbol_decode(self)
template_IMultiStreamDecoder_FadingSymbol_swigregister = _codes.template_IMultiStreamDecoder_FadingSymbol_swigregister
template_IMultiStreamDecoder_FadingSymbol_swigregister(template_IMultiStreamDecoder_FadingSymbol)

class template_IMultiStreamDecoder_FadingComplexSymbol(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, template_IMultiStreamDecoder_FadingComplexSymbol, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, template_IMultiStreamDecoder_FadingComplexSymbol, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _codes.delete_template_IMultiStreamDecoder_FadingComplexSymbol
    __del__ = lambda self : None;
    def reset(self): return _codes.template_IMultiStreamDecoder_FadingComplexSymbol_reset(self)
    def add(self, *args): return _codes.template_IMultiStreamDecoder_FadingComplexSymbol_add(self, *args)
    def decode(self): return _codes.template_IMultiStreamDecoder_FadingComplexSymbol_decode(self)
template_IMultiStreamDecoder_FadingComplexSymbol_swigregister = _codes.template_IMultiStreamDecoder_FadingComplexSymbol_swigregister
template_IMultiStreamDecoder_FadingComplexSymbol_swigregister(template_IMultiStreamDecoder_FadingComplexSymbol)

class ComplexSymbolToLLRDecoderAdaptor(template_IDecoder_ComplexSymbol):
    __swig_setmethods__ = {}
    for _s in [template_IDecoder_ComplexSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexSymbolToLLRDecoderAdaptor, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDecoder_ComplexSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexSymbolToLLRDecoderAdaptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_ComplexSymbolToLLRDecoderAdaptor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _codes.delete_ComplexSymbolToLLRDecoderAdaptor
    __del__ = lambda self : None;
    def reset(self): return _codes.ComplexSymbolToLLRDecoderAdaptor_reset(self)
    def add(self, *args): return _codes.ComplexSymbolToLLRDecoderAdaptor_add(self, *args)
    def decode(self): return _codes.ComplexSymbolToLLRDecoderAdaptor_decode(self)
ComplexSymbolToLLRDecoderAdaptor_swigregister = _codes.ComplexSymbolToLLRDecoderAdaptor_swigregister
ComplexSymbolToLLRDecoderAdaptor_swigregister(ComplexSymbolToLLRDecoderAdaptor)

class MultiToSingleStreamDecoder_Symbol(template_IDecoder_Symbol):
    __swig_setmethods__ = {}
    for _s in [template_IDecoder_Symbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiToSingleStreamDecoder_Symbol, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDecoder_Symbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiToSingleStreamDecoder_Symbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_MultiToSingleStreamDecoder_Symbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.MultiToSingleStreamDecoder_Symbol_reset(self)
    def add(self, *args): return _codes.MultiToSingleStreamDecoder_Symbol_add(self, *args)
    def decode(self): return _codes.MultiToSingleStreamDecoder_Symbol_decode(self)
    __swig_destroy__ = _codes.delete_MultiToSingleStreamDecoder_Symbol
    __del__ = lambda self : None;
MultiToSingleStreamDecoder_Symbol_swigregister = _codes.MultiToSingleStreamDecoder_Symbol_swigregister
MultiToSingleStreamDecoder_Symbol_swigregister(MultiToSingleStreamDecoder_Symbol)

class MultiToSingleStreamDecoder_SoftSymbol(template_IDecoder_SoftSymbol):
    __swig_setmethods__ = {}
    for _s in [template_IDecoder_SoftSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiToSingleStreamDecoder_SoftSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDecoder_SoftSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiToSingleStreamDecoder_SoftSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_MultiToSingleStreamDecoder_SoftSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.MultiToSingleStreamDecoder_SoftSymbol_reset(self)
    def add(self, *args): return _codes.MultiToSingleStreamDecoder_SoftSymbol_add(self, *args)
    def decode(self): return _codes.MultiToSingleStreamDecoder_SoftSymbol_decode(self)
    __swig_destroy__ = _codes.delete_MultiToSingleStreamDecoder_SoftSymbol
    __del__ = lambda self : None;
MultiToSingleStreamDecoder_SoftSymbol_swigregister = _codes.MultiToSingleStreamDecoder_SoftSymbol_swigregister
MultiToSingleStreamDecoder_SoftSymbol_swigregister(MultiToSingleStreamDecoder_SoftSymbol)

class MultiToSingleStreamDecoder_ComplexSymbol(template_IDecoder_ComplexSymbol):
    __swig_setmethods__ = {}
    for _s in [template_IDecoder_ComplexSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiToSingleStreamDecoder_ComplexSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDecoder_ComplexSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiToSingleStreamDecoder_ComplexSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_MultiToSingleStreamDecoder_ComplexSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.MultiToSingleStreamDecoder_ComplexSymbol_reset(self)
    def add(self, *args): return _codes.MultiToSingleStreamDecoder_ComplexSymbol_add(self, *args)
    def decode(self): return _codes.MultiToSingleStreamDecoder_ComplexSymbol_decode(self)
    __swig_destroy__ = _codes.delete_MultiToSingleStreamDecoder_ComplexSymbol
    __del__ = lambda self : None;
MultiToSingleStreamDecoder_ComplexSymbol_swigregister = _codes.MultiToSingleStreamDecoder_ComplexSymbol_swigregister
MultiToSingleStreamDecoder_ComplexSymbol_swigregister(MultiToSingleStreamDecoder_ComplexSymbol)

class MultiToSingleStreamDecoder_FadingSymbol(template_IDecoder_FadingSymbol):
    __swig_setmethods__ = {}
    for _s in [template_IDecoder_FadingSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiToSingleStreamDecoder_FadingSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDecoder_FadingSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiToSingleStreamDecoder_FadingSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_MultiToSingleStreamDecoder_FadingSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.MultiToSingleStreamDecoder_FadingSymbol_reset(self)
    def add(self, *args): return _codes.MultiToSingleStreamDecoder_FadingSymbol_add(self, *args)
    def decode(self): return _codes.MultiToSingleStreamDecoder_FadingSymbol_decode(self)
    __swig_destroy__ = _codes.delete_MultiToSingleStreamDecoder_FadingSymbol
    __del__ = lambda self : None;
MultiToSingleStreamDecoder_FadingSymbol_swigregister = _codes.MultiToSingleStreamDecoder_FadingSymbol_swigregister
MultiToSingleStreamDecoder_FadingSymbol_swigregister(MultiToSingleStreamDecoder_FadingSymbol)

class MultiToSingleStreamDecoder_FadingComplexSymbol(template_IDecoder_FadingComplexSymbol):
    __swig_setmethods__ = {}
    for _s in [template_IDecoder_FadingComplexSymbol]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiToSingleStreamDecoder_FadingComplexSymbol, name, value)
    __swig_getmethods__ = {}
    for _s in [template_IDecoder_FadingComplexSymbol]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiToSingleStreamDecoder_FadingComplexSymbol, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _codes.new_MultiToSingleStreamDecoder_FadingComplexSymbol(*args)
        try: self.this.append(this)
        except: self.this = this
    def reset(self): return _codes.MultiToSingleStreamDecoder_FadingComplexSymbol_reset(self)
    def add(self, *args): return _codes.MultiToSingleStreamDecoder_FadingComplexSymbol_add(self, *args)
    def decode(self): return _codes.MultiToSingleStreamDecoder_FadingComplexSymbol_decode(self)
    __swig_destroy__ = _codes.delete_MultiToSingleStreamDecoder_FadingComplexSymbol
    __del__ = lambda self : None;
MultiToSingleStreamDecoder_FadingComplexSymbol_swigregister = _codes.MultiToSingleStreamDecoder_FadingComplexSymbol_swigregister
MultiToSingleStreamDecoder_FadingComplexSymbol_swigregister(MultiToSingleStreamDecoder_FadingComplexSymbol)

class vector_encoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_encoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_encoder, name)
    __repr__ = _swig_repr
    def iterator(self): return _codes.vector_encoder_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _codes.vector_encoder___nonzero__(self)
    def __bool__(self): return _codes.vector_encoder___bool__(self)
    def __len__(self): return _codes.vector_encoder___len__(self)
    def pop(self): return _codes.vector_encoder_pop(self)
    def __getslice__(self, *args): return _codes.vector_encoder___getslice__(self, *args)
    def __setslice__(self, *args): return _codes.vector_encoder___setslice__(self, *args)
    def __delslice__(self, *args): return _codes.vector_encoder___delslice__(self, *args)
    def __delitem__(self, *args): return _codes.vector_encoder___delitem__(self, *args)
    def __getitem__(self, *args): return _codes.vector_encoder___getitem__(self, *args)
    def __setitem__(self, *args): return _codes.vector_encoder___setitem__(self, *args)
    def append(self, *args): return _codes.vector_encoder_append(self, *args)
    def empty(self): return _codes.vector_encoder_empty(self)
    def size(self): return _codes.vector_encoder_size(self)
    def clear(self): return _codes.vector_encoder_clear(self)
    def swap(self, *args): return _codes.vector_encoder_swap(self, *args)
    def get_allocator(self): return _codes.vector_encoder_get_allocator(self)
    def begin(self): return _codes.vector_encoder_begin(self)
    def end(self): return _codes.vector_encoder_end(self)
    def rbegin(self): return _codes.vector_encoder_rbegin(self)
    def rend(self): return _codes.vector_encoder_rend(self)
    def pop_back(self): return _codes.vector_encoder_pop_back(self)
    def erase(self, *args): return _codes.vector_encoder_erase(self, *args)
    def __init__(self, *args): 
        this = _codes.new_vector_encoder(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _codes.vector_encoder_push_back(self, *args)
    def front(self): return _codes.vector_encoder_front(self)
    def back(self): return _codes.vector_encoder_back(self)
    def assign(self, *args): return _codes.vector_encoder_assign(self, *args)
    def resize(self, *args): return _codes.vector_encoder_resize(self, *args)
    def insert(self, *args): return _codes.vector_encoder_insert(self, *args)
    def reserve(self, *args): return _codes.vector_encoder_reserve(self, *args)
    def capacity(self): return _codes.vector_encoder_capacity(self)
    __swig_destroy__ = _codes.delete_vector_encoder
    __del__ = lambda self : None;
vector_encoder_swigregister = _codes.vector_encoder_swigregister
vector_encoder_swigregister(vector_encoder)

# This file is compatible with both classic and new-style classes.


