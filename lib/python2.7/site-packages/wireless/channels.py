# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_channels', [dirname(__file__)])
        except ImportError:
            import _channels
            return _channels
        if fp is not None:
            try:
                _mod = imp.load_module('_channels', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _channels = swig_import_helper()
    del swig_import_helper
else:
    import _channels
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _channels.SHARED_PTR_DISOWN
import wireless.general
class BscChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BscChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BscChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_BscChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.BscChannel_seed(self, *args)
    def process(self, *args): return _channels.BscChannel_process(self, *args)
    def forecast(self, *args): return _channels.BscChannel_forecast(self, *args)
    __swig_destroy__ = _channels.delete_BscChannel
    __del__ = lambda self : None;
BscChannel_swigregister = _channels.BscChannel_swigregister
BscChannel_swigregister(BscChannel)

class MimoChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimoChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimoChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_MimoChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.MimoChannel_seed(self, *args)
    def process(self, *args): return _channels.MimoChannel_process(self, *args)
    def forecast(self, *args): return _channels.MimoChannel_forecast(self, *args)
    __swig_destroy__ = _channels.delete_MimoChannel
    __del__ = lambda self : None;
MimoChannel_swigregister = _channels.MimoChannel_swigregister
MimoChannel_swigregister(MimoChannel)

class SymbolAwgnChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolAwgnChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolAwgnChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_SymbolAwgnChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.SymbolAwgnChannel_seed(self, *args)
    def process(self, *args): return _channels.SymbolAwgnChannel_process(self, *args)
    def forecast(self, *args): return _channels.SymbolAwgnChannel_forecast(self, *args)
    def getStddevPerDimension(self): return _channels.SymbolAwgnChannel_getStddevPerDimension(self)
    def noisify(self, *args): return _channels.SymbolAwgnChannel_noisify(self, *args)
    __swig_destroy__ = _channels.delete_SymbolAwgnChannel
    __del__ = lambda self : None;
SymbolAwgnChannel_swigregister = _channels.SymbolAwgnChannel_swigregister
SymbolAwgnChannel_swigregister(SymbolAwgnChannel)

class ComplexAwgnChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexAwgnChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexAwgnChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_ComplexAwgnChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.ComplexAwgnChannel_seed(self, *args)
    def process(self, *args): return _channels.ComplexAwgnChannel_process(self, *args)
    def forecast(self, *args): return _channels.ComplexAwgnChannel_forecast(self, *args)
    def getStddevPerDimension(self): return _channels.ComplexAwgnChannel_getStddevPerDimension(self)
    def noisify(self, *args): return _channels.ComplexAwgnChannel_noisify(self, *args)
    __swig_destroy__ = _channels.delete_ComplexAwgnChannel
    __del__ = lambda self : None;
ComplexAwgnChannel_swigregister = _channels.ComplexAwgnChannel_swigregister
ComplexAwgnChannel_swigregister(ComplexAwgnChannel)

class SoftAwgnChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftAwgnChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftAwgnChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_SoftAwgnChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.SoftAwgnChannel_seed(self, *args)
    def process(self, *args): return _channels.SoftAwgnChannel_process(self, *args)
    def forecast(self, *args): return _channels.SoftAwgnChannel_forecast(self, *args)
    def getStddevPerDimension(self): return _channels.SoftAwgnChannel_getStddevPerDimension(self)
    def noisify(self, *args): return _channels.SoftAwgnChannel_noisify(self, *args)
    __swig_destroy__ = _channels.delete_SoftAwgnChannel
    __del__ = lambda self : None;
SoftAwgnChannel_swigregister = _channels.SoftAwgnChannel_swigregister
SoftAwgnChannel_swigregister(SoftAwgnChannel)

class FadingAwgnChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadingAwgnChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FadingAwgnChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_FadingAwgnChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.FadingAwgnChannel_seed(self, *args)
    def process(self, *args): return _channels.FadingAwgnChannel_process(self, *args)
    def forecast(self, *args): return _channels.FadingAwgnChannel_forecast(self, *args)
    def getStddevPerDimension(self): return _channels.FadingAwgnChannel_getStddevPerDimension(self)
    def noisify(self, *args): return _channels.FadingAwgnChannel_noisify(self, *args)
    __swig_destroy__ = _channels.delete_FadingAwgnChannel
    __del__ = lambda self : None;
FadingAwgnChannel_swigregister = _channels.FadingAwgnChannel_swigregister
FadingAwgnChannel_swigregister(FadingAwgnChannel)

class FadingComplexAwgnChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FadingComplexAwgnChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FadingComplexAwgnChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_FadingComplexAwgnChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.FadingComplexAwgnChannel_seed(self, *args)
    def process(self, *args): return _channels.FadingComplexAwgnChannel_process(self, *args)
    def forecast(self, *args): return _channels.FadingComplexAwgnChannel_forecast(self, *args)
    def getStddevPerDimension(self): return _channels.FadingComplexAwgnChannel_getStddevPerDimension(self)
    def noisify(self, *args): return _channels.FadingComplexAwgnChannel_noisify(self, *args)
    __swig_destroy__ = _channels.delete_FadingComplexAwgnChannel
    __del__ = lambda self : None;
FadingComplexAwgnChannel_swigregister = _channels.FadingComplexAwgnChannel_swigregister
FadingComplexAwgnChannel_swigregister(FadingComplexAwgnChannel)

class SoftCoherenceFading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftCoherenceFading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftCoherenceFading, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_SoftCoherenceFading(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.SoftCoherenceFading_seed(self, *args)
    def process(self, *args): return _channels.SoftCoherenceFading_process(self, *args)
    def forecast(self, *args): return _channels.SoftCoherenceFading_forecast(self, *args)
    def transform(self, *args): return _channels.SoftCoherenceFading_transform(self, *args)
    __swig_destroy__ = _channels.delete_SoftCoherenceFading
    __del__ = lambda self : None;
SoftCoherenceFading_swigregister = _channels.SoftCoherenceFading_swigregister
SoftCoherenceFading_swigregister(SoftCoherenceFading)

class ComplexCoherenceFading(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexCoherenceFading, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexCoherenceFading, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_ComplexCoherenceFading(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.ComplexCoherenceFading_seed(self, *args)
    def process(self, *args): return _channels.ComplexCoherenceFading_process(self, *args)
    def forecast(self, *args): return _channels.ComplexCoherenceFading_forecast(self, *args)
    def transform(self, *args): return _channels.ComplexCoherenceFading_transform(self, *args)
    __swig_destroy__ = _channels.delete_ComplexCoherenceFading
    __del__ = lambda self : None;
ComplexCoherenceFading_swigregister = _channels.ComplexCoherenceFading_swigregister
ComplexCoherenceFading_swigregister(ComplexCoherenceFading)

class MimoAwgnChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MimoAwgnChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MimoAwgnChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_MimoAwgnChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.MimoAwgnChannel_seed(self, *args)
    def process(self, *args): return _channels.MimoAwgnChannel_process(self, *args)
    def forecast(self, *args): return _channels.MimoAwgnChannel_forecast(self, *args)
    __swig_destroy__ = _channels.delete_MimoAwgnChannel
    __del__ = lambda self : None;
MimoAwgnChannel_swigregister = _channels.MimoAwgnChannel_swigregister
MimoAwgnChannel_swigregister(MimoAwgnChannel)

class AwgnCoherenceFadingChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AwgnCoherenceFadingChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AwgnCoherenceFadingChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_AwgnCoherenceFadingChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.AwgnCoherenceFadingChannel_seed(self, *args)
    def process(self, *args): return _channels.AwgnCoherenceFadingChannel_process(self, *args)
    def forecast(self, *args): return _channels.AwgnCoherenceFadingChannel_forecast(self, *args)
    __swig_destroy__ = _channels.delete_AwgnCoherenceFadingChannel
    __del__ = lambda self : None;
AwgnCoherenceFadingChannel_swigregister = _channels.AwgnCoherenceFadingChannel_swigregister
AwgnCoherenceFadingChannel_swigregister(AwgnCoherenceFadingChannel)

class AwgnCoherenceComplexFadingChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AwgnCoherenceComplexFadingChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AwgnCoherenceComplexFadingChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_AwgnCoherenceComplexFadingChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.AwgnCoherenceComplexFadingChannel_seed(self, *args)
    def process(self, *args): return _channels.AwgnCoherenceComplexFadingChannel_process(self, *args)
    def forecast(self, *args): return _channels.AwgnCoherenceComplexFadingChannel_forecast(self, *args)
    __swig_destroy__ = _channels.delete_AwgnCoherenceComplexFadingChannel
    __del__ = lambda self : None;
AwgnCoherenceComplexFadingChannel_swigregister = _channels.AwgnCoherenceComplexFadingChannel_swigregister
AwgnCoherenceComplexFadingChannel_swigregister(AwgnCoherenceComplexFadingChannel)

class ComplexTransparentFadingChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplexTransparentFadingChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComplexTransparentFadingChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_ComplexTransparentFadingChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.ComplexTransparentFadingChannel_seed(self, *args)
    def process(self, *args): return _channels.ComplexTransparentFadingChannel_process(self, *args)
    def forecast(self, *args): return _channels.ComplexTransparentFadingChannel_forecast(self, *args)
    def transform(self, *args): return _channels.ComplexTransparentFadingChannel_transform(self, *args)
    __swig_destroy__ = _channels.delete_ComplexTransparentFadingChannel
    __del__ = lambda self : None;
ComplexTransparentFadingChannel_swigregister = _channels.ComplexTransparentFadingChannel_swigregister
ComplexTransparentFadingChannel_swigregister(ComplexTransparentFadingChannel)

class SoftTransparentFadingChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftTransparentFadingChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftTransparentFadingChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_SoftTransparentFadingChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.SoftTransparentFadingChannel_seed(self, *args)
    def process(self, *args): return _channels.SoftTransparentFadingChannel_process(self, *args)
    def forecast(self, *args): return _channels.SoftTransparentFadingChannel_forecast(self, *args)
    def transform(self, *args): return _channels.SoftTransparentFadingChannel_transform(self, *args)
    __swig_destroy__ = _channels.delete_SoftTransparentFadingChannel
    __del__ = lambda self : None;
SoftTransparentFadingChannel_swigregister = _channels.SoftTransparentFadingChannel_swigregister
SoftTransparentFadingChannel_swigregister(SoftTransparentFadingChannel)

class SymbolTransparentFadingChannel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SymbolTransparentFadingChannel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SymbolTransparentFadingChannel, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _channels.new_SymbolTransparentFadingChannel(*args)
        try: self.this.append(this)
        except: self.this = this
    def seed(self, *args): return _channels.SymbolTransparentFadingChannel_seed(self, *args)
    def process(self, *args): return _channels.SymbolTransparentFadingChannel_process(self, *args)
    def forecast(self, *args): return _channels.SymbolTransparentFadingChannel_forecast(self, *args)
    def transform(self, *args): return _channels.SymbolTransparentFadingChannel_transform(self, *args)
    __swig_destroy__ = _channels.delete_SymbolTransparentFadingChannel
    __del__ = lambda self : None;
SymbolTransparentFadingChannel_swigregister = _channels.SymbolTransparentFadingChannel_swigregister
SymbolTransparentFadingChannel_swigregister(SymbolTransparentFadingChannel)

# This file is compatible with both classic and new-style classes.


