# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base_vec', [dirname(__file__)])
        except ImportError:
            import _base_vec
            return _base_vec
        if fp is not None:
            try:
                _mod = imp.load_module('_base_vec', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _base_vec = swig_import_helper()
    del swig_import_helper
else:
    import _base_vec
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class bin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bin, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_vec.new_bin(*args)
        try: self.this.append(this)
        except: self.this = this
    def __idiv__(self, *args): return _base_vec.bin___idiv__(self, *args)
    def __ior__(self, *args): return _base_vec.bin___ior__(self, *args)
    def __div__(self, *args): return _base_vec.bin___div__(self, *args)
    def __or__(self, *args): return _base_vec.bin___or__(self, *args)
    def __iadd__(self, *args): return _base_vec.bin___iadd__(self, *args)
    def __ixor__(self, *args): return _base_vec.bin___ixor__(self, *args)
    def __add__(self, *args): return _base_vec.bin___add__(self, *args)
    def __xor__(self, *args): return _base_vec.bin___xor__(self, *args)
    def __isub__(self, *args): return _base_vec.bin___isub__(self, *args)
    def __sub__(self, *args): return _base_vec.bin___sub__(self, *args)
    def __neg__(self): return _base_vec.bin___neg__(self)
    def __imul__(self, *args): return _base_vec.bin___imul__(self, *args)
    def __iand__(self, *args): return _base_vec.bin___iand__(self, *args)
    def __mul__(self, *args): return _base_vec.bin___mul__(self, *args)
    def __and__(self, *args): return _base_vec.bin___and__(self, *args)
    def __invert__(self): return _base_vec.bin___invert__(self)
    def __eq__(self, *args): return _base_vec.bin___eq__(self, *args)
    def __ne__(self, *args): return _base_vec.bin___ne__(self, *args)
    def __lt__(self, *args): return _base_vec.bin___lt__(self, *args)
    def __le__(self, *args): return _base_vec.bin___le__(self, *args)
    def __gt__(self, *args): return _base_vec.bin___gt__(self, *args)
    def __ge__(self, *args): return _base_vec.bin___ge__(self, *args)
    def __nonzero__(self):
        return _base_vec.bin___nonzero__(self)
    __bool__ = __nonzero__


    def value(self): return _base_vec.bin_value(self)
    __swig_destroy__ = _base_vec.delete_bin
    __del__ = lambda self : None;
bin_swigregister = _base_vec.bin_swigregister
bin_swigregister(bin)


def __lshift__(*args):
  return _base_vec.__lshift__(*args)
__lshift__ = _base_vec.__lshift__

def __rshift__(*args):
  return _base_vec.__rshift__(*args)
__rshift__ = _base_vec.__rshift__

def abs(*args):
  return _base_vec.abs(*args)
abs = _base_vec.abs
class vec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_vec.new_vec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_vec.delete_vec
    __del__ = lambda self : None;
    def length(self): return _base_vec.vec_length(self)
    def size(self): return _base_vec.vec_size(self)
    def set_size(self, *args): return _base_vec.vec_set_size(self, *args)
    def set_length(self, *args): return _base_vec.vec_set_length(self, *args)
    def zeros(self): return _base_vec.vec_zeros(self)
    def clear(self): return _base_vec.vec_clear(self)
    def ones(self): return _base_vec.vec_ones(self)
    def __call__(self, *args): return _base_vec.vec___call__(self, *args)
    def get(self, *args): return _base_vec.vec_get(self, *args)
    def set(self, *args): return _base_vec.vec_set(self, *args)
    def transpose(self): return _base_vec.vec_transpose(self)
    def T(self): return _base_vec.vec_T(self)
    def hermitian_transpose(self): return _base_vec.vec_hermitian_transpose(self)
    def H(self): return _base_vec.vec_H(self)
    def __iadd__(self, *args): return _base_vec.vec___iadd__(self, *args)
    def __isub__(self, *args): return _base_vec.vec___isub__(self, *args)
    def __imul__(self, *args): return _base_vec.vec___imul__(self, *args)
    def __idiv__(self, *args): return _base_vec.vec___idiv__(self, *args)
    def right(self, *args): return _base_vec.vec_right(self, *args)
    def left(self, *args): return _base_vec.vec_left(self, *args)
    def mid(self, *args): return _base_vec.vec_mid(self, *args)
    def split(self, *args): return _base_vec.vec_split(self, *args)
    def shift_right(self, *args): return _base_vec.vec_shift_right(self, *args)
    def shift_left(self, *args): return _base_vec.vec_shift_left(self, *args)
    def set_subvector(self, *args): return _base_vec.vec_set_subvector(self, *args)
    def replace_mid(self, *args): return _base_vec.vec_replace_mid(self, *args)
    def ins(self, *args): return _base_vec.vec_ins(self, *args)
    def __lt__(self, *args): return _base_vec.vec___lt__(self, *args)
    def __le__(self, *args): return _base_vec.vec___le__(self, *args)
    def __gt__(self, *args): return _base_vec.vec___gt__(self, *args)
    def __ge__(self, *args): return _base_vec.vec___ge__(self, *args)
    def __eq__(self, *args): return _base_vec.vec___eq__(self, *args)
    def __ne__(self, *args): return _base_vec.vec___ne__(self, *args)
    def __len__(self): return _base_vec.vec___len__(self)
    def __getitem__(self, *args): return _base_vec.vec___getitem__(self, *args)
    def __setitem__(self, *args): return _base_vec.vec___setitem__(self, *args)
    def __delitem__(self, *args): return _base_vec.vec___delitem__(self, *args)
    def __add__(self, *args): return _base_vec.vec___add__(self, *args)
    def __radd__(self, *args): return _base_vec.vec___radd__(self, *args)
    def __sub__(self, *args): return _base_vec.vec___sub__(self, *args)
    def __rsub__(self, *args): return _base_vec.vec___rsub__(self, *args)
    def __neg__(self): return _base_vec.vec___neg__(self)
    def __mul__(self, *args): return _base_vec.vec___mul__(self, *args)
    def __rmul__(self, *args): return _base_vec.vec___rmul__(self, *args)
    def __div__(self, *args): return _base_vec.vec___div__(self, *args)
    def __rdiv__(self, *args): return _base_vec.vec___rdiv__(self, *args)
    def __str__(self): return _base_vec.vec___str__(self)
vec_swigregister = _base_vec.vec_swigregister
vec_swigregister(vec)

class ivec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ivec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_vec.new_ivec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_vec.delete_ivec
    __del__ = lambda self : None;
    def length(self): return _base_vec.ivec_length(self)
    def size(self): return _base_vec.ivec_size(self)
    def set_size(self, *args): return _base_vec.ivec_set_size(self, *args)
    def set_length(self, *args): return _base_vec.ivec_set_length(self, *args)
    def zeros(self): return _base_vec.ivec_zeros(self)
    def clear(self): return _base_vec.ivec_clear(self)
    def ones(self): return _base_vec.ivec_ones(self)
    def __call__(self, *args): return _base_vec.ivec___call__(self, *args)
    def get(self, *args): return _base_vec.ivec_get(self, *args)
    def set(self, *args): return _base_vec.ivec_set(self, *args)
    def transpose(self): return _base_vec.ivec_transpose(self)
    def T(self): return _base_vec.ivec_T(self)
    def hermitian_transpose(self): return _base_vec.ivec_hermitian_transpose(self)
    def H(self): return _base_vec.ivec_H(self)
    def __iadd__(self, *args): return _base_vec.ivec___iadd__(self, *args)
    def __isub__(self, *args): return _base_vec.ivec___isub__(self, *args)
    def __imul__(self, *args): return _base_vec.ivec___imul__(self, *args)
    def __idiv__(self, *args): return _base_vec.ivec___idiv__(self, *args)
    def right(self, *args): return _base_vec.ivec_right(self, *args)
    def left(self, *args): return _base_vec.ivec_left(self, *args)
    def mid(self, *args): return _base_vec.ivec_mid(self, *args)
    def split(self, *args): return _base_vec.ivec_split(self, *args)
    def shift_right(self, *args): return _base_vec.ivec_shift_right(self, *args)
    def shift_left(self, *args): return _base_vec.ivec_shift_left(self, *args)
    def set_subvector(self, *args): return _base_vec.ivec_set_subvector(self, *args)
    def replace_mid(self, *args): return _base_vec.ivec_replace_mid(self, *args)
    def ins(self, *args): return _base_vec.ivec_ins(self, *args)
    def __lt__(self, *args): return _base_vec.ivec___lt__(self, *args)
    def __le__(self, *args): return _base_vec.ivec___le__(self, *args)
    def __gt__(self, *args): return _base_vec.ivec___gt__(self, *args)
    def __ge__(self, *args): return _base_vec.ivec___ge__(self, *args)
    def __eq__(self, *args): return _base_vec.ivec___eq__(self, *args)
    def __ne__(self, *args): return _base_vec.ivec___ne__(self, *args)
    def __len__(self): return _base_vec.ivec___len__(self)
    def __getitem__(self, *args): return _base_vec.ivec___getitem__(self, *args)
    def __setitem__(self, *args): return _base_vec.ivec___setitem__(self, *args)
    def __delitem__(self, *args): return _base_vec.ivec___delitem__(self, *args)
    def __add__(self, *args): return _base_vec.ivec___add__(self, *args)
    def __radd__(self, *args): return _base_vec.ivec___radd__(self, *args)
    def __sub__(self, *args): return _base_vec.ivec___sub__(self, *args)
    def __rsub__(self, *args): return _base_vec.ivec___rsub__(self, *args)
    def __neg__(self): return _base_vec.ivec___neg__(self)
    def __mul__(self, *args): return _base_vec.ivec___mul__(self, *args)
    def __rmul__(self, *args): return _base_vec.ivec___rmul__(self, *args)
    def __div__(self, *args): return _base_vec.ivec___div__(self, *args)
    def __rdiv__(self, *args): return _base_vec.ivec___rdiv__(self, *args)
    def __str__(self): return _base_vec.ivec___str__(self)
ivec_swigregister = _base_vec.ivec_swigregister
ivec_swigregister(ivec)

class svec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, svec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, svec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_vec.new_svec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_vec.delete_svec
    __del__ = lambda self : None;
    def length(self): return _base_vec.svec_length(self)
    def size(self): return _base_vec.svec_size(self)
    def set_size(self, *args): return _base_vec.svec_set_size(self, *args)
    def set_length(self, *args): return _base_vec.svec_set_length(self, *args)
    def zeros(self): return _base_vec.svec_zeros(self)
    def clear(self): return _base_vec.svec_clear(self)
    def ones(self): return _base_vec.svec_ones(self)
    def __call__(self, *args): return _base_vec.svec___call__(self, *args)
    def get(self, *args): return _base_vec.svec_get(self, *args)
    def set(self, *args): return _base_vec.svec_set(self, *args)
    def transpose(self): return _base_vec.svec_transpose(self)
    def T(self): return _base_vec.svec_T(self)
    def hermitian_transpose(self): return _base_vec.svec_hermitian_transpose(self)
    def H(self): return _base_vec.svec_H(self)
    def __iadd__(self, *args): return _base_vec.svec___iadd__(self, *args)
    def __isub__(self, *args): return _base_vec.svec___isub__(self, *args)
    def __imul__(self, *args): return _base_vec.svec___imul__(self, *args)
    def __idiv__(self, *args): return _base_vec.svec___idiv__(self, *args)
    def right(self, *args): return _base_vec.svec_right(self, *args)
    def left(self, *args): return _base_vec.svec_left(self, *args)
    def mid(self, *args): return _base_vec.svec_mid(self, *args)
    def split(self, *args): return _base_vec.svec_split(self, *args)
    def shift_right(self, *args): return _base_vec.svec_shift_right(self, *args)
    def shift_left(self, *args): return _base_vec.svec_shift_left(self, *args)
    def set_subvector(self, *args): return _base_vec.svec_set_subvector(self, *args)
    def replace_mid(self, *args): return _base_vec.svec_replace_mid(self, *args)
    def ins(self, *args): return _base_vec.svec_ins(self, *args)
    def __lt__(self, *args): return _base_vec.svec___lt__(self, *args)
    def __le__(self, *args): return _base_vec.svec___le__(self, *args)
    def __gt__(self, *args): return _base_vec.svec___gt__(self, *args)
    def __ge__(self, *args): return _base_vec.svec___ge__(self, *args)
    def __eq__(self, *args): return _base_vec.svec___eq__(self, *args)
    def __ne__(self, *args): return _base_vec.svec___ne__(self, *args)
    def __len__(self): return _base_vec.svec___len__(self)
    def __getitem__(self, *args): return _base_vec.svec___getitem__(self, *args)
    def __setitem__(self, *args): return _base_vec.svec___setitem__(self, *args)
    def __delitem__(self, *args): return _base_vec.svec___delitem__(self, *args)
    def __add__(self, *args): return _base_vec.svec___add__(self, *args)
    def __radd__(self, *args): return _base_vec.svec___radd__(self, *args)
    def __sub__(self, *args): return _base_vec.svec___sub__(self, *args)
    def __rsub__(self, *args): return _base_vec.svec___rsub__(self, *args)
    def __neg__(self): return _base_vec.svec___neg__(self)
    def __mul__(self, *args): return _base_vec.svec___mul__(self, *args)
    def __rmul__(self, *args): return _base_vec.svec___rmul__(self, *args)
    def __div__(self, *args): return _base_vec.svec___div__(self, *args)
    def __rdiv__(self, *args): return _base_vec.svec___rdiv__(self, *args)
    def __str__(self): return _base_vec.svec___str__(self)
svec_swigregister = _base_vec.svec_swigregister
svec_swigregister(svec)

class cvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cvec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_vec.new_cvec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_vec.delete_cvec
    __del__ = lambda self : None;
    def length(self): return _base_vec.cvec_length(self)
    def size(self): return _base_vec.cvec_size(self)
    def set_size(self, *args): return _base_vec.cvec_set_size(self, *args)
    def set_length(self, *args): return _base_vec.cvec_set_length(self, *args)
    def zeros(self): return _base_vec.cvec_zeros(self)
    def clear(self): return _base_vec.cvec_clear(self)
    def ones(self): return _base_vec.cvec_ones(self)
    def __call__(self, *args): return _base_vec.cvec___call__(self, *args)
    def get(self, *args): return _base_vec.cvec_get(self, *args)
    def set(self, *args): return _base_vec.cvec_set(self, *args)
    def transpose(self): return _base_vec.cvec_transpose(self)
    def T(self): return _base_vec.cvec_T(self)
    def hermitian_transpose(self): return _base_vec.cvec_hermitian_transpose(self)
    def H(self): return _base_vec.cvec_H(self)
    def __iadd__(self, *args): return _base_vec.cvec___iadd__(self, *args)
    def __isub__(self, *args): return _base_vec.cvec___isub__(self, *args)
    def __imul__(self, *args): return _base_vec.cvec___imul__(self, *args)
    def __idiv__(self, *args): return _base_vec.cvec___idiv__(self, *args)
    def right(self, *args): return _base_vec.cvec_right(self, *args)
    def left(self, *args): return _base_vec.cvec_left(self, *args)
    def mid(self, *args): return _base_vec.cvec_mid(self, *args)
    def split(self, *args): return _base_vec.cvec_split(self, *args)
    def shift_right(self, *args): return _base_vec.cvec_shift_right(self, *args)
    def shift_left(self, *args): return _base_vec.cvec_shift_left(self, *args)
    def set_subvector(self, *args): return _base_vec.cvec_set_subvector(self, *args)
    def replace_mid(self, *args): return _base_vec.cvec_replace_mid(self, *args)
    def ins(self, *args): return _base_vec.cvec_ins(self, *args)
    def __lt__(self, *args): return _base_vec.cvec___lt__(self, *args)
    def __le__(self, *args): return _base_vec.cvec___le__(self, *args)
    def __gt__(self, *args): return _base_vec.cvec___gt__(self, *args)
    def __ge__(self, *args): return _base_vec.cvec___ge__(self, *args)
    def __eq__(self, *args): return _base_vec.cvec___eq__(self, *args)
    def __ne__(self, *args): return _base_vec.cvec___ne__(self, *args)
    def __len__(self): return _base_vec.cvec___len__(self)
    def __getitem__(self, *args): return _base_vec.cvec___getitem__(self, *args)
    def __setitem__(self, *args): return _base_vec.cvec___setitem__(self, *args)
    def __delitem__(self, *args): return _base_vec.cvec___delitem__(self, *args)
    def __add__(self, *args): return _base_vec.cvec___add__(self, *args)
    def __radd__(self, *args): return _base_vec.cvec___radd__(self, *args)
    def __sub__(self, *args): return _base_vec.cvec___sub__(self, *args)
    def __rsub__(self, *args): return _base_vec.cvec___rsub__(self, *args)
    def __neg__(self): return _base_vec.cvec___neg__(self)
    def __mul__(self, *args): return _base_vec.cvec___mul__(self, *args)
    def __rmul__(self, *args): return _base_vec.cvec___rmul__(self, *args)
    def __div__(self, *args): return _base_vec.cvec___div__(self, *args)
    def __rdiv__(self, *args): return _base_vec.cvec___rdiv__(self, *args)
    def __str__(self): return _base_vec.cvec___str__(self)
cvec_swigregister = _base_vec.cvec_swigregister
cvec_swigregister(cvec)

class bvec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bvec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bvec, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_vec.new_bvec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_vec.delete_bvec
    __del__ = lambda self : None;
    def length(self): return _base_vec.bvec_length(self)
    def size(self): return _base_vec.bvec_size(self)
    def set_size(self, *args): return _base_vec.bvec_set_size(self, *args)
    def set_length(self, *args): return _base_vec.bvec_set_length(self, *args)
    def zeros(self): return _base_vec.bvec_zeros(self)
    def clear(self): return _base_vec.bvec_clear(self)
    def ones(self): return _base_vec.bvec_ones(self)
    def __call__(self, *args): return _base_vec.bvec___call__(self, *args)
    def get(self, *args): return _base_vec.bvec_get(self, *args)
    def set(self, *args): return _base_vec.bvec_set(self, *args)
    def transpose(self): return _base_vec.bvec_transpose(self)
    def T(self): return _base_vec.bvec_T(self)
    def hermitian_transpose(self): return _base_vec.bvec_hermitian_transpose(self)
    def H(self): return _base_vec.bvec_H(self)
    def __iadd__(self, *args): return _base_vec.bvec___iadd__(self, *args)
    def __isub__(self, *args): return _base_vec.bvec___isub__(self, *args)
    def __imul__(self, *args): return _base_vec.bvec___imul__(self, *args)
    def __idiv__(self, *args): return _base_vec.bvec___idiv__(self, *args)
    def right(self, *args): return _base_vec.bvec_right(self, *args)
    def left(self, *args): return _base_vec.bvec_left(self, *args)
    def mid(self, *args): return _base_vec.bvec_mid(self, *args)
    def split(self, *args): return _base_vec.bvec_split(self, *args)
    def shift_right(self, *args): return _base_vec.bvec_shift_right(self, *args)
    def shift_left(self, *args): return _base_vec.bvec_shift_left(self, *args)
    def set_subvector(self, *args): return _base_vec.bvec_set_subvector(self, *args)
    def replace_mid(self, *args): return _base_vec.bvec_replace_mid(self, *args)
    def ins(self, *args): return _base_vec.bvec_ins(self, *args)
    def __lt__(self, *args): return _base_vec.bvec___lt__(self, *args)
    def __le__(self, *args): return _base_vec.bvec___le__(self, *args)
    def __gt__(self, *args): return _base_vec.bvec___gt__(self, *args)
    def __ge__(self, *args): return _base_vec.bvec___ge__(self, *args)
    def __eq__(self, *args): return _base_vec.bvec___eq__(self, *args)
    def __ne__(self, *args): return _base_vec.bvec___ne__(self, *args)
    def __len__(self): return _base_vec.bvec___len__(self)
    def __getitem__(self, *args): return _base_vec.bvec___getitem__(self, *args)
    def __setitem__(self, *args): return _base_vec.bvec___setitem__(self, *args)
    def __delitem__(self, *args): return _base_vec.bvec___delitem__(self, *args)
    def __add__(self, *args): return _base_vec.bvec___add__(self, *args)
    def __radd__(self, *args): return _base_vec.bvec___radd__(self, *args)
    def __sub__(self, *args): return _base_vec.bvec___sub__(self, *args)
    def __rsub__(self, *args): return _base_vec.bvec___rsub__(self, *args)
    def __neg__(self): return _base_vec.bvec___neg__(self)
    def __mul__(self, *args): return _base_vec.bvec___mul__(self, *args)
    def __rmul__(self, *args): return _base_vec.bvec___rmul__(self, *args)
    def __div__(self, *args): return _base_vec.bvec___div__(self, *args)
    def __rdiv__(self, *args): return _base_vec.bvec___rdiv__(self, *args)
    def __str__(self): return _base_vec.bvec___str__(self)
bvec_swigregister = _base_vec.bvec_swigregister
bvec_swigregister(bvec)

# This file is compatible with both classic and new-style classes.


