# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_modulator', [dirname(__file__)])
        except ImportError:
            import _modulator
            return _modulator
        if fp is not None:
            try:
                _mod = imp.load_module('_modulator', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _modulator = swig_import_helper()
    del swig_import_helper
else:
    import _modulator
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _modulator.SHARED_PTR_DISOWN
import wireless.itpp.base_vec
LOGMAP = _modulator.LOGMAP
APPROX = _modulator.APPROX
class Modulator_1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modulator_1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modulator_1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _modulator.new_Modulator_1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_Modulator_1D
    __del__ = lambda self : None;
    def set(self, *args): return _modulator.Modulator_1D_set(self, *args)
    def bits_per_symbol(self): return _modulator.Modulator_1D_bits_per_symbol(self)
    def get_symbols(self): return _modulator.Modulator_1D_get_symbols(self)
    def get_bits2symbols(self): return _modulator.Modulator_1D_get_bits2symbols(self)
    def modulate(self, *args): return _modulator.Modulator_1D_modulate(self, *args)
    def demodulate(self, *args): return _modulator.Modulator_1D_demodulate(self, *args)
    def modulate_bits(self, *args): return _modulator.Modulator_1D_modulate_bits(self, *args)
    def demodulate_bits(self, *args): return _modulator.Modulator_1D_demodulate_bits(self, *args)
    def demodulate_soft_bits(self, *args): return _modulator.Modulator_1D_demodulate_soft_bits(self, *args)
Modulator_1D_swigregister = _modulator.Modulator_1D_swigregister
Modulator_1D_swigregister(Modulator_1D)

class Modulator_2D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Modulator_2D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Modulator_2D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _modulator.new_Modulator_2D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_Modulator_2D
    __del__ = lambda self : None;
    def set(self, *args): return _modulator.Modulator_2D_set(self, *args)
    def bits_per_symbol(self): return _modulator.Modulator_2D_bits_per_symbol(self)
    def get_symbols(self): return _modulator.Modulator_2D_get_symbols(self)
    def get_bits2symbols(self): return _modulator.Modulator_2D_get_bits2symbols(self)
    def modulate(self, *args): return _modulator.Modulator_2D_modulate(self, *args)
    def demodulate(self, *args): return _modulator.Modulator_2D_demodulate(self, *args)
    def modulate_bits(self, *args): return _modulator.Modulator_2D_modulate_bits(self, *args)
    def demodulate_bits(self, *args): return _modulator.Modulator_2D_demodulate_bits(self, *args)
    def demodulate_soft_bits(self, *args): return _modulator.Modulator_2D_demodulate_soft_bits(self, *args)
Modulator_2D_swigregister = _modulator.Modulator_2D_swigregister
Modulator_2D_swigregister(Modulator_2D)

class QAM(Modulator_2D):
    __swig_setmethods__ = {}
    for _s in [Modulator_2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QAM, name, value)
    __swig_getmethods__ = {}
    for _s in [Modulator_2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QAM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _modulator.new_QAM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_QAM
    __del__ = lambda self : None;
    def set_M(self, *args): return _modulator.QAM_set_M(self, *args)
    def demodulate_bits(self, *args): return _modulator.QAM_demodulate_bits(self, *args)
QAM_swigregister = _modulator.QAM_swigregister
QAM_swigregister(QAM)

class PSK(Modulator_2D):
    __swig_setmethods__ = {}
    for _s in [Modulator_2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PSK, name, value)
    __swig_getmethods__ = {}
    for _s in [Modulator_2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PSK, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _modulator.new_PSK(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_PSK
    __del__ = lambda self : None;
    def set_M(self, *args): return _modulator.PSK_set_M(self, *args)
    def demodulate_bits(self, *args): return _modulator.PSK_demodulate_bits(self, *args)
PSK_swigregister = _modulator.PSK_swigregister
PSK_swigregister(PSK)

class QPSK(PSK):
    __swig_setmethods__ = {}
    for _s in [PSK]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, QPSK, name, value)
    __swig_getmethods__ = {}
    for _s in [PSK]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, QPSK, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _modulator.new_QPSK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_QPSK
    __del__ = lambda self : None;
    def demodulate_soft_bits(self, *args): return _modulator.QPSK_demodulate_soft_bits(self, *args)
QPSK_swigregister = _modulator.QPSK_swigregister
QPSK_swigregister(QPSK)

class BPSK_c(PSK):
    __swig_setmethods__ = {}
    for _s in [PSK]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BPSK_c, name, value)
    __swig_getmethods__ = {}
    for _s in [PSK]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BPSK_c, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _modulator.new_BPSK_c()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_BPSK_c
    __del__ = lambda self : None;
    def modulate_bits(self, *args): return _modulator.BPSK_c_modulate_bits(self, *args)
    def demodulate_bits(self, *args): return _modulator.BPSK_c_demodulate_bits(self, *args)
    def demodulate_soft_bits(self, *args): return _modulator.BPSK_c_demodulate_soft_bits(self, *args)
BPSK_c_swigregister = _modulator.BPSK_c_swigregister
BPSK_c_swigregister(BPSK_c)

class BPSK(Modulator_1D):
    __swig_setmethods__ = {}
    for _s in [Modulator_1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BPSK, name, value)
    __swig_getmethods__ = {}
    for _s in [Modulator_1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BPSK, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _modulator.new_BPSK()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_BPSK
    __del__ = lambda self : None;
    def modulate_bits(self, *args): return _modulator.BPSK_modulate_bits(self, *args)
    def demodulate_bits(self, *args): return _modulator.BPSK_demodulate_bits(self, *args)
    def demodulate_soft_bits(self, *args): return _modulator.BPSK_demodulate_soft_bits(self, *args)
BPSK_swigregister = _modulator.BPSK_swigregister
BPSK_swigregister(BPSK)

class PAM_c(Modulator_2D):
    __swig_setmethods__ = {}
    for _s in [Modulator_2D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAM_c, name, value)
    __swig_getmethods__ = {}
    for _s in [Modulator_2D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PAM_c, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _modulator.new_PAM_c(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_PAM_c
    __del__ = lambda self : None;
    def set_M(self, *args): return _modulator.PAM_c_set_M(self, *args)
    def demodulate_bits(self, *args): return _modulator.PAM_c_demodulate_bits(self, *args)
    def demodulate_soft_bits(self, *args): return _modulator.PAM_c_demodulate_soft_bits(self, *args)
PAM_c_swigregister = _modulator.PAM_c_swigregister
PAM_c_swigregister(PAM_c)

class PAM(Modulator_1D):
    __swig_setmethods__ = {}
    for _s in [Modulator_1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAM, name, value)
    __swig_getmethods__ = {}
    for _s in [Modulator_1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PAM, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _modulator.new_PAM(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _modulator.delete_PAM
    __del__ = lambda self : None;
    def set_M(self, *args): return _modulator.PAM_set_M(self, *args)
    def demodulate_bits(self, *args): return _modulator.PAM_demodulate_bits(self, *args)
PAM_swigregister = _modulator.PAM_swigregister
PAM_swigregister(PAM)

# This file is compatible with both classic and new-style classes.


