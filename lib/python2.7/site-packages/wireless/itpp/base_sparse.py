# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base_sparse', [dirname(__file__)])
        except ImportError:
            import _base_sparse
            return _base_sparse
        if fp is not None:
            try:
                _mod = imp.load_module('_base_sparse', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _base_sparse = swig_import_helper()
    del swig_import_helper
else:
    import _base_sparse
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _base_sparse.SHARED_PTR_DISOWN
import wireless.itpp.base_vec
class GF2vec_sparse_my(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GF2vec_sparse_my, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GF2vec_sparse_my, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_sparse.new_GF2vec_sparse_my(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_sparse.delete_GF2vec_sparse_my
    __del__ = lambda self : None;
    def set_size(self, *args): return _base_sparse.GF2vec_sparse_my_set_size(self, *args)
    def size(self): return _base_sparse.GF2vec_sparse_my_size(self)
    def nnz(self): return _base_sparse.GF2vec_sparse_my_nnz(self)
    def density(self): return _base_sparse.GF2vec_sparse_my_density(self)
    def set_small_element(self, *args): return _base_sparse.GF2vec_sparse_my_set_small_element(self, *args)
    def remove_small_elements(self): return _base_sparse.GF2vec_sparse_my_remove_small_elements(self)
    def resize_data(self, *args): return _base_sparse.GF2vec_sparse_my_resize_data(self, *args)
    def compact(self): return _base_sparse.GF2vec_sparse_my_compact(self)
    def full(self, *args): return _base_sparse.GF2vec_sparse_my_full(self, *args)
    def __call__(self, *args): return _base_sparse.GF2vec_sparse_my___call__(self, *args)
    def set(self, *args): return _base_sparse.GF2vec_sparse_my_set(self, *args)
    def set_new(self, *args): return _base_sparse.GF2vec_sparse_my_set_new(self, *args)
    def add_elem(self, *args): return _base_sparse.GF2vec_sparse_my_add_elem(self, *args)
    def add(self, *args): return _base_sparse.GF2vec_sparse_my_add(self, *args)
    def zeros(self): return _base_sparse.GF2vec_sparse_my_zeros(self)
    def zero_elem(self, *args): return _base_sparse.GF2vec_sparse_my_zero_elem(self, *args)
    def clear(self): return _base_sparse.GF2vec_sparse_my_clear(self)
    def clear_elem(self, *args): return _base_sparse.GF2vec_sparse_my_clear_elem(self, *args)
    def get_nz_data(self, *args): return _base_sparse.GF2vec_sparse_my_get_nz_data(self, *args)
    def get_nz_index(self, *args): return _base_sparse.GF2vec_sparse_my_get_nz_index(self, *args)
    def get_nz(self, *args): return _base_sparse.GF2vec_sparse_my_get_nz(self, *args)
    def get_nz_indices(self): return _base_sparse.GF2vec_sparse_my_get_nz_indices(self)
    def get_subvector(self, *args): return _base_sparse.GF2vec_sparse_my_get_subvector(self, *args)
    def sqr(self): return _base_sparse.GF2vec_sparse_my_sqr(self)
GF2vec_sparse_my_swigregister = _base_sparse.GF2vec_sparse_my_swigregister
GF2vec_sparse_my_swigregister(GF2vec_sparse_my)

class GF2mat_sparse(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GF2mat_sparse, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GF2mat_sparse, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_sparse.new_GF2mat_sparse(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _base_sparse.delete_GF2mat_sparse
    __del__ = lambda self : None;
    def set_size(self, *args): return _base_sparse.GF2mat_sparse_set_size(self, *args)
    def rows(self): return _base_sparse.GF2mat_sparse_rows(self)
    def cols(self): return _base_sparse.GF2mat_sparse_cols(self)
    def nnz(self): return _base_sparse.GF2mat_sparse_nnz(self)
    def density(self): return _base_sparse.GF2mat_sparse_density(self)
    def compact(self): return _base_sparse.GF2mat_sparse_compact(self)
    def full(self, *args): return _base_sparse.GF2mat_sparse_full(self, *args)
    def __call__(self, *args): return _base_sparse.GF2mat_sparse___call__(self, *args)
    def set(self, *args): return _base_sparse.GF2mat_sparse_set(self, *args)
    def set_new(self, *args): return _base_sparse.GF2mat_sparse_set_new(self, *args)
    def add_elem(self, *args): return _base_sparse.GF2mat_sparse_add_elem(self, *args)
    def zeros(self): return _base_sparse.GF2mat_sparse_zeros(self)
    def zero_elem(self, *args): return _base_sparse.GF2mat_sparse_zero_elem(self, *args)
    def clear(self): return _base_sparse.GF2mat_sparse_clear(self)
    def clear_elem(self, *args): return _base_sparse.GF2mat_sparse_clear_elem(self, *args)
    def set_submatrix(self, *args): return _base_sparse.GF2mat_sparse_set_submatrix(self, *args)
    def get_submatrix(self, *args): return _base_sparse.GF2mat_sparse_get_submatrix(self, *args)
    def get_submatrix_cols(self, *args): return _base_sparse.GF2mat_sparse_get_submatrix_cols(self, *args)
    def get_col(self, *args): return _base_sparse.GF2mat_sparse_get_col(self, *args)
    def set_col(self, *args): return _base_sparse.GF2mat_sparse_set_col(self, *args)
    def transpose(self): return _base_sparse.GF2mat_sparse_transpose(self)
GF2mat_sparse_swigregister = _base_sparse.GF2mat_sparse_swigregister
GF2mat_sparse_swigregister(GF2mat_sparse)

class GF2mat_sparse_alist(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GF2mat_sparse_alist, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GF2mat_sparse_alist, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_sparse.new_GF2mat_sparse_alist(*args)
        try: self.this.append(this)
        except: self.this = this
    def read(self, *args): return _base_sparse.GF2mat_sparse_alist_read(self, *args)
    def write(self, *args): return _base_sparse.GF2mat_sparse_alist_write(self, *args)
    def to_sparse(self, transpose=False): return _base_sparse.GF2mat_sparse_alist_to_sparse(self, transpose)
    def from_sparse(self, *args): return _base_sparse.GF2mat_sparse_alist_from_sparse(self, *args)
    __swig_destroy__ = _base_sparse.delete_GF2mat_sparse_alist
    __del__ = lambda self : None;
GF2mat_sparse_alist_swigregister = _base_sparse.GF2mat_sparse_alist_swigregister
GF2mat_sparse_alist_swigregister(GF2mat_sparse_alist)

class GF2mat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GF2mat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GF2mat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _base_sparse.new_GF2mat(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_size(self, *args): return _base_sparse.GF2mat_set_size(self, *args)
    def sparsify(self): return _base_sparse.GF2mat_sparsify(self)
    def bvecify(self): return _base_sparse.GF2mat_bvecify(self)
    def get(self, *args): return _base_sparse.GF2mat_get(self, *args)
    def __call__(self, *args): return _base_sparse.GF2mat___call__(self, *args)
    def set(self, *args): return _base_sparse.GF2mat_set(self, *args)
    def addto_element(self, *args): return _base_sparse.GF2mat_addto_element(self, *args)
    def set_col(self, *args): return _base_sparse.GF2mat_set_col(self, *args)
    def set_row(self, *args): return _base_sparse.GF2mat_set_row(self, *args)
    def is_zero(self): return _base_sparse.GF2mat_is_zero(self)
    def swap_rows(self, *args): return _base_sparse.GF2mat_swap_rows(self, *args)
    def swap_cols(self, *args): return _base_sparse.GF2mat_swap_cols(self, *args)
    def permute_rows(self, *args): return _base_sparse.GF2mat_permute_rows(self, *args)
    def permute_cols(self, *args): return _base_sparse.GF2mat_permute_cols(self, *args)
    def transpose(self): return _base_sparse.GF2mat_transpose(self)
    def get_submatrix(self, *args): return _base_sparse.GF2mat_get_submatrix(self, *args)
    def concatenate_horizontal(self, *args): return _base_sparse.GF2mat_concatenate_horizontal(self, *args)
    def concatenate_vertical(self, *args): return _base_sparse.GF2mat_concatenate_vertical(self, *args)
    def get_row(self, *args): return _base_sparse.GF2mat_get_row(self, *args)
    def get_col(self, *args): return _base_sparse.GF2mat_get_col(self, *args)
    def density(self): return _base_sparse.GF2mat_density(self)
    def rows(self): return _base_sparse.GF2mat_rows(self)
    def cols(self): return _base_sparse.GF2mat_cols(self)
    def add_rows(self, *args): return _base_sparse.GF2mat_add_rows(self, *args)
    def inverse(self): return _base_sparse.GF2mat_inverse(self)
    def row_rank(self): return _base_sparse.GF2mat_row_rank(self)
    def T_fact(self, *args): return _base_sparse.GF2mat_T_fact(self, *args)
    def T_fact_update_bitflip(self, *args): return _base_sparse.GF2mat_T_fact_update_bitflip(self, *args)
    def T_fact_update_addcol(self, *args): return _base_sparse.GF2mat_T_fact_update_addcol(self, *args)
    def __eq__(self, *args): return _base_sparse.GF2mat___eq__(self, *args)
    __swig_destroy__ = _base_sparse.delete_GF2mat
    __del__ = lambda self : None;
GF2mat_swigregister = _base_sparse.GF2mat_swigregister
GF2mat_swigregister(GF2mat)


def __rshift__(*args):
  return _base_sparse.__rshift__(*args)
__rshift__ = _base_sparse.__rshift__

def __mul__(*args):
  return _base_sparse.__mul__(*args)
__mul__ = _base_sparse.__mul__

def __add__(*args):
  return _base_sparse.__add__(*args)
__add__ = _base_sparse.__add__

def __lshift__(*args):
  return _base_sparse.__lshift__(*args)
__lshift__ = _base_sparse.__lshift__

def gf2dense_eye(*args):
  return _base_sparse.gf2dense_eye(*args)
gf2dense_eye = _base_sparse.gf2dense_eye
# This file is compatible with both classic and new-style classes.


