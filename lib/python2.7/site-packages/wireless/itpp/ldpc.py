# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ldpc', [dirname(__file__)])
        except ImportError:
            import _ldpc
            return _ldpc
        if fp is not None:
            try:
                _mod = imp.load_module('_ldpc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ldpc = swig_import_helper()
    del swig_import_helper
else:
    import _ldpc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


SHARED_PTR_DISOWN = _ldpc.SHARED_PTR_DISOWN
import wireless.itpp.base_vec
import wireless.itpp.base_sparse
class Channel_Code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel_Code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel_Code, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ldpc.delete_Channel_Code
    __del__ = lambda self : None;
    def encode(self, *args): return _ldpc.Channel_Code_encode(self, *args)
    def decode(self, *args): return _ldpc.Channel_Code_decode(self, *args)
    def get_rate(self): return _ldpc.Channel_Code_get_rate(self)
Channel_Code_swigregister = _ldpc.Channel_Code_swigregister
Channel_Code_swigregister(Channel_Code)

class Dummy_Code(Channel_Code):
    __swig_setmethods__ = {}
    for _s in [Channel_Code]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dummy_Code, name, value)
    __swig_getmethods__ = {}
    for _s in [Channel_Code]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Dummy_Code, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _ldpc.new_Dummy_Code()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ldpc.delete_Dummy_Code
    __del__ = lambda self : None;
    def encode(self, *args): return _ldpc.Dummy_Code_encode(self, *args)
    def decode(self, *args): return _ldpc.Dummy_Code_decode(self, *args)
    def get_rate(self): return _ldpc.Dummy_Code_get_rate(self)
Dummy_Code_swigregister = _ldpc.Dummy_Code_swigregister
Dummy_Code_swigregister(Dummy_Code)

class LDPC_Parity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Parity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Parity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_LDPC_Parity(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ldpc.delete_LDPC_Parity
    __del__ = lambda self : None;
    def initialize(self, *args): return _ldpc.LDPC_Parity_initialize(self, *args)
    def get_H(self, transpose=False): return _ldpc.LDPC_Parity_get_H(self, transpose)
    def get_col(self, *args): return _ldpc.LDPC_Parity_get_col(self, *args)
    def get_row(self, *args): return _ldpc.LDPC_Parity_get_row(self, *args)
    def get_nvar(self): return _ldpc.LDPC_Parity_get_nvar(self)
    def get_ncheck(self): return _ldpc.LDPC_Parity_get_ncheck(self)
    def set(self, *args): return _ldpc.LDPC_Parity_set(self, *args)
    def get(self, *args): return _ldpc.LDPC_Parity_get(self, *args)
    def __call__(self, *args): return _ldpc.LDPC_Parity___call__(self, *args)
    def display_stats(self): return _ldpc.LDPC_Parity_display_stats(self)
    def get_rate(self): return _ldpc.LDPC_Parity_get_rate(self)
    def import_alist(self, *args): return _ldpc.LDPC_Parity_import_alist(self, *args)
    def export_alist(self): return _ldpc.LDPC_Parity_export_alist(self)
    def load_alist(self, *args): return _ldpc.LDPC_Parity_load_alist(self, *args)
    def save_alist(self, *args): return _ldpc.LDPC_Parity_save_alist(self, *args)
LDPC_Parity_swigregister = _ldpc.LDPC_Parity_swigregister
LDPC_Parity_swigregister(LDPC_Parity)

class LDPC_Parity_Unstructured(LDPC_Parity):
    __swig_setmethods__ = {}
    for _s in [LDPC_Parity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Parity_Unstructured, name, value)
    __swig_getmethods__ = {}
    for _s in [LDPC_Parity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Parity_Unstructured, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def display_stats(self): return _ldpc.LDPC_Parity_Unstructured_display_stats(self)
    def cycle_removal_MGW(self, *args): return _ldpc.LDPC_Parity_Unstructured_cycle_removal_MGW(self, *args)
    __swig_destroy__ = _ldpc.delete_LDPC_Parity_Unstructured
    __del__ = lambda self : None;
LDPC_Parity_Unstructured_swigregister = _ldpc.LDPC_Parity_Unstructured_swigregister
LDPC_Parity_Unstructured_swigregister(LDPC_Parity_Unstructured)

class LDPC_Parity_Irregular(LDPC_Parity_Unstructured):
    __swig_setmethods__ = {}
    for _s in [LDPC_Parity_Unstructured]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Parity_Irregular, name, value)
    __swig_getmethods__ = {}
    for _s in [LDPC_Parity_Unstructured]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Parity_Irregular, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_LDPC_Parity_Irregular(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(self, *args): return _ldpc.LDPC_Parity_Irregular_generate(self, *args)
    def display_stats(self): return _ldpc.LDPC_Parity_Irregular_display_stats(self)
    __swig_destroy__ = _ldpc.delete_LDPC_Parity_Irregular
    __del__ = lambda self : None;
LDPC_Parity_Irregular_swigregister = _ldpc.LDPC_Parity_Irregular_swigregister
LDPC_Parity_Irregular_swigregister(LDPC_Parity_Irregular)

class LDPC_Parity_Regular(LDPC_Parity_Unstructured):
    __swig_setmethods__ = {}
    for _s in [LDPC_Parity_Unstructured]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Parity_Regular, name, value)
    __swig_getmethods__ = {}
    for _s in [LDPC_Parity_Unstructured]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Parity_Regular, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_LDPC_Parity_Regular(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(self, *args): return _ldpc.LDPC_Parity_Regular_generate(self, *args)
    def display_stats(self): return _ldpc.LDPC_Parity_Regular_display_stats(self)
    __swig_destroy__ = _ldpc.delete_LDPC_Parity_Regular
    __del__ = lambda self : None;
LDPC_Parity_Regular_swigregister = _ldpc.LDPC_Parity_Regular_swigregister
LDPC_Parity_Regular_swigregister(LDPC_Parity_Regular)

class BLDPC_Parity(LDPC_Parity):
    __swig_setmethods__ = {}
    for _s in [LDPC_Parity]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BLDPC_Parity, name, value)
    __swig_getmethods__ = {}
    for _s in [LDPC_Parity]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BLDPC_Parity, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_BLDPC_Parity(*args)
        try: self.this.append(this)
        except: self.this = this
    def expand_base(self, *args): return _ldpc.BLDPC_Parity_expand_base(self, *args)
    def get_exp_factor(self): return _ldpc.BLDPC_Parity_get_exp_factor(self)
    def get_base_matrix(self): return _ldpc.BLDPC_Parity_get_base_matrix(self)
    def is_valid(self): return _ldpc.BLDPC_Parity_is_valid(self)
    def set_exp_factor(self, *args): return _ldpc.BLDPC_Parity_set_exp_factor(self, *args)
    def load_base_matrix(self, *args): return _ldpc.BLDPC_Parity_load_base_matrix(self, *args)
    def save_base_matrix(self, *args): return _ldpc.BLDPC_Parity_save_base_matrix(self, *args)
    __swig_destroy__ = _ldpc.delete_BLDPC_Parity
    __del__ = lambda self : None;
BLDPC_Parity_swigregister = _ldpc.BLDPC_Parity_swigregister
BLDPC_Parity_swigregister(BLDPC_Parity)

class LDPC_Generator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Generator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Generator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ldpc.delete_LDPC_Generator
    __del__ = lambda self : None;
    def encode(self, *args): return _ldpc.LDPC_Generator_encode(self, *args)
    def get_type(self): return _ldpc.LDPC_Generator_get_type(self)
LDPC_Generator_swigregister = _ldpc.LDPC_Generator_swigregister
LDPC_Generator_swigregister(LDPC_Generator)

class LDPC_Generator_Systematic(LDPC_Generator):
    __swig_setmethods__ = {}
    for _s in [LDPC_Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Generator_Systematic, name, value)
    __swig_getmethods__ = {}
    for _s in [LDPC_Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Generator_Systematic, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_LDPC_Generator_Systematic(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ldpc.delete_LDPC_Generator_Systematic
    __del__ = lambda self : None;
    def encode(self, *args): return _ldpc.LDPC_Generator_Systematic_encode(self, *args)
    def construct(self, *args): return _ldpc.LDPC_Generator_Systematic_construct(self, *args)
LDPC_Generator_Systematic_swigregister = _ldpc.LDPC_Generator_Systematic_swigregister
LDPC_Generator_Systematic_swigregister(LDPC_Generator_Systematic)

class BLDPC_Generator(LDPC_Generator):
    __swig_setmethods__ = {}
    for _s in [LDPC_Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BLDPC_Generator, name, value)
    __swig_getmethods__ = {}
    for _s in [LDPC_Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BLDPC_Generator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_BLDPC_Generator(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_exp_factor(self): return _ldpc.BLDPC_Generator_get_exp_factor(self)
    def encode(self, *args): return _ldpc.BLDPC_Generator_encode(self, *args)
    def construct(self, *args): return _ldpc.BLDPC_Generator_construct(self, *args)
    __swig_destroy__ = _ldpc.delete_BLDPC_Generator
    __del__ = lambda self : None;
BLDPC_Generator_swigregister = _ldpc.BLDPC_Generator_swigregister
BLDPC_Generator_swigregister(BLDPC_Generator)

class LDPC_Code(Channel_Code):
    __swig_setmethods__ = {}
    for _s in [Channel_Code]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDPC_Code, name, value)
    __swig_getmethods__ = {}
    for _s in [Channel_Code]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LDPC_Code, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _ldpc.new_LDPC_Code(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ldpc.delete_LDPC_Code
    __del__ = lambda self : None;
    def set_code(self, *args): return _ldpc.LDPC_Code_set_code(self, *args)
    def load_code(self, *args): return _ldpc.LDPC_Code_load_code(self, *args)
    def save_code(self, *args): return _ldpc.LDPC_Code_save_code(self, *args)
    def set_decoding_method(self, *args): return _ldpc.LDPC_Code_set_decoding_method(self, *args)
    def set_exit_conditions(self, *args): return _ldpc.LDPC_Code_set_exit_conditions(self, *args)
    def set_llrcalc(self, *args): return _ldpc.LDPC_Code_set_llrcalc(self, *args)
    def encode(self, *args): return _ldpc.LDPC_Code_encode(self, *args)
    def decode(self, *args): return _ldpc.LDPC_Code_decode(self, *args)
    def decode_soft_out(self, *args): return _ldpc.LDPC_Code_decode_soft_out(self, *args)
    def bp_decode(self, *args): return _ldpc.LDPC_Code_bp_decode(self, *args)
    def syndrome_check(self, *args): return _ldpc.LDPC_Code_syndrome_check(self, *args)
    def get_rate(self): return _ldpc.LDPC_Code_get_rate(self)
    def get_nvar(self): return _ldpc.LDPC_Code_get_nvar(self)
    def get_ncheck(self): return _ldpc.LDPC_Code_get_ncheck(self)
    def get_ninfo(self): return _ldpc.LDPC_Code_get_ninfo(self)
    def get_decoding_method(self): return _ldpc.LDPC_Code_get_decoding_method(self)
    def get_nrof_iterations(self): return _ldpc.LDPC_Code_get_nrof_iterations(self)
    def get_llrcalc(self): return _ldpc.LDPC_Code_get_llrcalc(self)
LDPC_Code_swigregister = _ldpc.LDPC_Code_swigregister
LDPC_Code_swigregister(LDPC_Code)


def __lshift__(*args):
  return _ldpc.__lshift__(*args)
__lshift__ = _ldpc.__lshift__
# This file is compatible with both classic and new-style classes.


